[{"slug": "blog-relaunch", "updated_at": "2008/01/26 05:55:10 +0000", "title": "Blog Relaunch", "posting_type": "post", "id": 1, "category_id": 1, "published_at": "2008/01/12 09:37:19 +0000", "contents": "\u003Cp\u003ESo, after the past version of the blog (which looked much the same), I decided to take the time to entirely rewrite the platform from scratch using Rails 2.0. And here it is, Eoraptor Generation 2\u003C/p\u003E\r\n\r\n\u003Ch3\u003ESo, what is Eoraptor?\u003C/h3\u003E\r\n\u003Cp\u003EIn essence, It's a tiny blog platform I wrote with Rails to get a feeling for 2.0. Everything is self contained and the UI is built with the idea that integration is everything - the admin UI is a part of the blog interface and it's really all about publishing it and it's done. Nothing more, nothing less.\u003C/p\u003E\r\n\r\n\u003Cp\u003EAnyway, thats enough for the moment - check back soon for both some old comment, some new comment and a few of the trick's I've implement.\u003C/p\u003E", "state": "published", "created_at": "2008/01/12 09:37:19 +0000"}, {"slug": "choose-your-language-wisely", "updated_at": "2008/06/30 16:45:42 +0000", "title": "Choose your language wisely", "posting_type": "post", "id": 3, "category_id": 5, "published_at": "2008/01/12 13:22:27 +0000", "contents": "\u003Cp\u003EWhen it comes to web development, usability is important - I mean, I should know - I'm not very good at it myself. Now, there is one thing you need to know about usability - there are a lot of little things that can make a real difference. Today, I'm going to show you one of the little things that can make a small difference to your work.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Ch4\u003EChoosing your language wisely\u003C/h4\u003E\r\n\u003Cp\u003EOne of the things that really 'grinds my gears' is the choice in language some people use to explain actions - it's a frustrating thing even more so because for a lot of people it's not immediately apparent - you may interpret it one way whilst your users may see it another way.\u003C/p\u003E\r\n\r\n\u003Cp\u003EThe main example of this lies in blogs - there can often be an ambiguous enough to cause confusion among even some of the more educated users. Take for example, \u003Ca href=\"http://lifehacker.com\" title=\"Lifehacker\"\u003ELifehacker\u003C/a\u003E.\u003C/p\u003E\r\n\r\n\u003Cp\u003EThe issue here lies in the choice of \"next page\" and \"previous page\" - the choice is ambiguous enough to confuse in some cases. The issue here also lies in the fact most blogs either use this or the alternative working \"older posts\" - the latter being more descriptive but causing issues due to the difference in meaning yet likeness of implementation.\u003C/p\u003E\r\n\r\n\u003Cp\u003EThe real issue here? As a developer, you \u003Cstrong\u003Ereally\u003C/strong\u003E need to choose saner defaults. Your average blog isn't run by someone who knows how to program - it's usually run by a person using some pre-built package. So, if you're working on a publishing platform - take note, \u003Cstrong\u003EUse sane defaults\u003C/strong\u003E.\u003C/p\u003E", "state": "published", "created_at": "2008/01/12 13:22:27 +0000"}, {"slug": "ruby-watch-in-oh-eight", "updated_at": "2008/01/26 05:55:10 +0000", "title": "Ruby-watch in Oh-Eight", "posting_type": "post", "id": 4, "category_id": 2, "published_at": "2008/01/13 23:30:01 +0000", "contents": "\u003Cp\u003EAs is tradition at the end of the year, I made my own New Year's Resolutions - some were the usual (get fit, spend less time on the computer etc. etc.) but I set two goals specifically related to this one blog post - Firstly, as you've probably guessed, I promised myself that I'd blog on a more regular basis on my own plan and secondly I promised to both learn more programming stuff and to more actively participate in the community. In the vein of the last two, I know present with you a short list of some technologies I think you should keep an eye on in 2008.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Ch3\u003EWeb Development\u003C/h3\u003E\r\n\r\n\u003Cp\u003EYou've probably already read it several times before - The downfall in Rails popularity is at hand. Whether it's Zed Shaw's spectacular rant (You've gotta give a blogger points when their site's name is \"Zed's so ******* awesome\") or even just a small shift of focus from the Rails stack to something based on Merb / DataMapper / jQuery (hint hint), You really need to put some time into taking a proper look at the alternatives.\u003C/p\u003E\r\n\r\n\u003Ch4\u003ERack - It's got lobsters!\u003C/h4\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Rack-_a_ruby_webserver_interface_medium\" src=\"/images/uploaded/image/0000/0026/Rack-_a_Ruby_Webserver_Interface_medium.png?1200304106\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003ERack is an ingenious little gem (pun intended) in the Ruby web development world, not too dissimilar from Python's WSGI, that opens up a whole heap of possibilities in tying your Ruby infrastructure together.\u003C/p\u003E\r\n\r\n\u003Cp\u003EFor a start, you have the ability to add middleware and the like to you're apps and to tie it all together in one need package and then you have a range of adapters ranging from thin (which I'll discuss in a minute) and Mongrel to other servers (e.g. WEBrick and FCGI) - all in one unified interface. In other words - true kick assery.\u003C/p\u003E\r\n\r\n\u003Cp\u003EThe ultimate proof of aforementioned kick assery? Look at the gem's source - It's got a freaking demo app with LOBSTERS. \u003Ca href=\"http://rack.rubyforge.org/\" title=\"Check out this item\"\u003ECheck it out \u0026raquo;\u003C/a\u003E\u003C/p\u003E\r\n\r\n\u003Ch4\u003EThin - The lightweight alternative to Mongrel\u003C/h4\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Thin_-_yet_another_web_server_medium\" src=\"/images/uploaded/image/0000/0023/Thin_-_yet_another_web_server_medium.png?1200304042\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003EImagine this situation - two web servers sitting in a room. Ones called Mongrel, the others called Thin. Now imagine Mongrel as some AC-DC wannabe dude - sure he's fast and cool, but then you've got this totally bad ass Indie Rocker 'thin' next to him. When Kate Moss walks in, \u003Cstrong\u003Eyou know which god damned one she's gonna choose\u003C/strong\u003E.\u003C/p\u003E\r\n\r\n\u003Cp\u003EBad indie rock jokes aside, Thin's a pretty cool piece of kit - It takes EventMachine for evented networking (more on that soon), Mongrel's admittedly kick ass Ragel-powered HTTP-parser and Rack to provide a lightweight yet easily interfacable web server for ruby applications. Hell, I bet even William Shatner shat his pants when he first saw the benchmarks. \u003Ca href=\"\" title=\"Check out this item\"\u003ECheck it out \u0026raquo;\u003C/a\u003E\u003C/p\u003E\r\n\r\n\u003Ch4\u003EMerb - No, not the escort review board\u003C/h4\u003E\r\n\r\n\u003Cp\u003EOriginally Mongrel + Erb, Merb is the play child of Ezra from EngineYard which evolved from a little, lightweight ruby web framework to a lightweight replacement for Rails. The whole development process is imho a lot nicer and the people contributing know their s***.\u003C/p\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Merb__looking_for_a_better_framework_medium\" src=\"/images/uploaded/image/0000/0020/Merb__Looking_for_a_better_framework_medium.png?1200304012\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003ESeriously, in the last few months some of the jumps Merb's taken have provided true awesomeness. It's not longer a small odd-ball framework and instead of forcing you into one specific set of conventions like Rails does, Merb lets you choose your ORM, Testing framework and pretty much most other stuff (its small and clean code base is a dream to hack around on) whilst seamlessly tying it all into the base system.\u003C/p\u003E\r\n\r\n\u003Cp\u003EIf you want even more of a kick, I suggest checking out also checking out \u003Ca href=\"http://hassox.blogspot.com/\" title=\"Hassox's blog\"\u003EHassox\u003C/a\u003E's port of Restful_authentication over to Merb - it shows how the Merb communities approach to testing and such extends to giving the choice to you. \u003Ca href=\"http://merbivore.com\" title=\"Check out this item\"\u003ECheck it out \u0026raquo;\u003C/a\u003E\u003C/p\u003E\r\n\r\n\u003Ch4\u003ERamaze - Another framework!\u003C/h4\u003E\r\n\r\n\u003Cp\u003EI haven't had much experience myself with Ramaze but I've good stuff - I suggest googling some of the good reviews. Oh, Did I mention it also uses Rack\u003C/p\u003E\r\n\r\n\u003Cp\u003EIf there is only one reason to check out the Ramaze site - that reason is the awesome list of Ruby web frameworks on the site. Seriously, go and check it out. \u003Cstrong\u003ENow.\u003C/strong\u003E \u003Ca href=\"http://ramaze.net/\" title=\"Check out this item\"\u003ECheck it out \u0026raquo;\u003C/a\u003E\u003C/p\u003E\r\n\r\n\u003Ch4\u003EKirk Haines (aka wyhaines) Work\u003C/h4\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Swiftcore_swiftiply_medium\" src=\"/images/uploaded/image/0000/0029/Swiftcore_Swiftiply_medium.png?1200304574\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003Ewyhaines has been and is doing some awesome work - he wrote an add on of sorts to mongrel which add's EventMachine support - in other words, performance gains pretty much free. Oh, Did I mention he wrote Iowa - a pretty kick ass framework that's done heaps of stuff other frameworks are only now starting to work on.\u003C/p\u003E\r\n\r\n\u003Cp\u003EThe one thing I'm really looking forward to is Wisteria - Sure, we haven't heard much (the page on the Swiftcore site has a brief summary) but it sounds like its going to totally kick ass. \u003Ca href=\"http://swiftiply.swiftcore.org/\" title=\"Check out this item\"\u003ECheck it out \u0026raquo;\u003C/a\u003E\u003C/p\u003E\r\n\r\n\t\r\n\u003Ch3\u003EOther Tools\u003C/h3\u003E\r\n\r\n\u003Ch4\u003EDataMapper - It's bitchin'\u003C/h4\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Datamapper_-_datamapper_medium\" src=\"/images/uploaded/image/0000/0017/Datamapper_-_DataMapper_medium.png?1200303947\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003EJust a quick one here - DataMapper is a very small, newish and pretty damned kick ass ORM. The process is very open like Merb's which is awesome and #datamapper on Freenode is rockin'. There are a lot of smart people working on making datamapper even better and there is also quite a bit of overlap between the datamapper and merb communities - something which has led to some great integration of datamapper into merb via the merb_datamapper gem. \u003Ca href=\"http://datamapper.org/\" title=\"Check out this item\"\u003ECheck it out \u0026raquo;\u003C/a\u003E\u003C/p\u003E\r\n\r\n\u003Ch4\u003ERuby 1.9 - Yarrrrrrrvvvv!\u003C/h4\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Previewscreensnapz001_medium\" src=\"/images/uploaded/image/0000/0032/PreviewScreenSnapz001_medium.png?1201238246\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003E1.9 is the long-awaited update of Ruby with heaps of changes - first off, the integration of YARV means that 1.9 is on it's way to be very fast and when you consider the shift towards Event-based networking and such, there's a nice future for ruby developers speed wise (faster HTTP servers, faster applications and in general, a faster experience). The best part of it is that there is currently a developers release - meaning you can get right in and start playing around with your code - making it even faster. The only let down at the moment? There are many libraries which haven't been ported. Such is life. \u003Ca href=\"http://www.ruby-lang.org/en/news/2007/12/25/ruby-1-9-0-released/\" title=\"Check out this item\"\u003ECheck it out \u0026raquo;\u003C/a\u003E\u003C/p\u003E\r\n\r\n\u003Ch4\u003ERubinius - it's totally bitching\u003C/h4\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Firefoxscreensnapz002_thumb\" src=\"/images/uploaded/image/0000/0035/FirefoxScreenSnapz002_thumb.png?1201238306\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003EAs the last item on the list, Rubinius also has the privilege of being the coolest. An entirely-new interpreter for Ruby, it's interesting in that most of language and it's standard lib are build in Ruby - there has been a focus on writing it in Ruby as much as is possible. Taking queues from the VM's for languages like Smalltalk, It also has other advantages such as the open community ala Merb and DataMapper as well as funding from \u003Ca href=\"http://engineyard.com/\" title=\"EngineYard\"\u003EEngineYard\u003C/a\u003E - who've hired developers to work on it. \u003Ca href=\"http://rubini.us/\" title=\"Check out this item\"\u003ECheck it out \u0026raquo;\u003C/a\u003E\u003C/p\u003E\r\n\r\n\u003Cbr /\u003E\r\n\r\n\u003Cp\u003EAll in all, I think that 2008 is going to be an awesome year. Even if it is full of Ruby bashers ;)\u003C/p\u003E\r\n\t", "state": "published", "created_at": "2008/01/13 23:30:01 +0000"}, {"slug": "visittracker", "updated_at": "2008/01/26 05:55:10 +0000", "title": "VisitTracker", "posting_type": "post", "id": 5, "category_id": 2, "published_at": "2008/01/14 22:58:50 +0000", "contents": "\u003Cp\u003EBeing bored today, I decided to take a bit more in depth look at Rack as well as trying to write a nice little demo app with it. The result you see here is today is VisitTracker - a mini hit logger for websites that produces CSV log files with minimal amounts of info.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Ch3\u003EThe Background\u003C/h3\u003E\r\n\r\n\u003Cp\u003ERack is a nice little WSGI-like interface for Ruby - it lets you really easily write Rack adapters which can be plugged into handlers - Web servers - as well as doing all sorts of cool stuff. you can install it by typing \u003Cstrong\u003Egem install rack\u003C/strong\u003E. For the purpose of this article, I'm using the built in Mongrel handler for testing and Thin for production (yes, I'm an idiot.)\u003C/p\u003E\r\n\r\n\u003Ch3\u003EThe Application\u003C/h3\u003E\r\n\r\n\u003Cp\u003EFor the impatient, here is the resultant code (and an explanation follows):\u003C/p\u003E\r\n\r\n\u003Cp\u003E\u003Cstrong\u003Evisittracker.rb\u003C/strong\u003E:\u003C/p\u003E\r\n\u003Ccode class=\"ruby\"\u003Erequire 'rubygems'\r\nrequire 'rack'\r\nrequire 'rack/request'\r\nrequire 'rack/response'\r\nrequire 'yaml'\r\nrequire 'singleton'\r\nrequire 'markaby'\r\n\r\ntrap(\"SIGINT\") do\r\n  puts \"Server Killed...\"\r\n  exit(0)\r\nend\r\n\r\nmodule SuttoNet\r\n  \r\n  def self.run_default(opts = {})\r\n    items = {:sites_file =\u003E \"sites.yml\", :log =\u003E \"hits.log\", :port =\u003E 8532}.merge(opts)\r\n    port = items.delete(:port)\r\n    application = VisitTracker.new(items)\r\n    puts \"Running server...\"\r\n    Rack::Handler::Mongrel.run(application, :port =\u003E port)\r\n  end\r\n  \r\n  class VisitTracker\r\n    attr_accessor :request, :response, :site, :response_html\r\n    \r\n    REQUEST_PATH = /^\\/hits\\/([A-Za-z0-9]+)$/\r\n    \r\n    def initialize(opts = {})\r\n      SiteHash.load_file(opts.delete(:sites_file))\r\n      Logger.instance.setup(opts.delete(:log))\r\n      generate_response_html!\r\n    end\r\n    \r\n    def call(env)\r\n      self.request  = Rack::Request.new(env)\r\n      self.response = Rack::Response.new\r\n      process!\r\n      respond!\r\n    end\r\n    \r\n    def process!\r\n      load_vars_from_url\r\n      request_hash = {\r\n        :site    =\u003E self.site,\r\n        :time    =\u003E Time.now,\r\n        :referer =\u003E request.referer,\r\n        :user    =\u003E request.env[\"REMOTE_USER\"],\r\n        :addr    =\u003E request.env[\"REMOTE_ADDR\"],\r\n        :page    =\u003E request.GET[\"page\"]\r\n      }\r\n      Logger.instance.record_hit(request_hash)\r\n    end\r\n    \r\n    def load_vars_from_url\r\n      if request.path_info =~ REQUEST_PATH\r\n        if defined?(DEBUG_REQUESTS)\r\n          puts \"Matches path\"\r\n          puts \"Hash -\u003E #{$1}\"\r\n        end\r\n        self.site = SiteHash.site_for($1)\r\n        puts \"Site is #{self.site}\" if defined?(DEBUG_REQUESTS)\r\n      else\r\n        self.site = \"unknown\"\r\n      end\r\n    end\r\n    \r\n    def respond!\r\n      Rack::Response.new.finish do |res|\r\n        res.write response_html\r\n      end\r\n    end\r\n    \r\n    def generate_response_html!\r\n      self.response_html = Markaby::Builder.new.html do\r\n        head do\r\n          title \"VisitTracker\"\r\n        end\r\n        \r\n        body do\r\n          strong \"Recorded Hit\"\r\n        end\r\n      end.to_s\r\n    end\r\n    \r\n  end\r\n  \r\n  class SiteHash\r\n    def self.load_file(filename)\r\n      @@sites = YAML::load(File.read(filename))\r\n    end\r\n    \r\n    def self.site_for(hash)\r\n      @@sites ||= {}\r\n      @@sites[hash] or \"unknown\"\r\n    end\r\n  end\r\n  \r\n  class Logger\r\n    include Singleton\r\n    \r\n    attr_accessor :buffer, :file, :last_hit\r\n    \r\n    MAX_BUFFER = 100\r\n    \r\n    def record_hit(details)\r\n      self.buffer \u003C\u003C format_string(details)\r\n      puts \"Buffer full? #{buffer_full?}, Buffer has #{self.buffer.size} items.\" if defined?(DEBUG_REQUESTS)\r\n      self.last_hit = Time.now\r\n      if (self.last_hit \u003C (Time.now - (15 * 60))) or buffer_full?\r\n        flush_buffer!\r\n      end\r\n    end\r\n    \r\n    def setup(filename)\r\n      self.file = File.open(filename, \"a+\")\r\n      self.buffer = []\r\n    end\r\n    \r\n    def flush_buffer!\r\n      self.file.puts(self.buffer.join(\"\\n\"))\r\n      self.buffer = []\r\n    end\r\n    \r\n    def buffer_full?\r\n      self.buffer.size \u003E= MAX_BUFFER\r\n    end\r\n    \r\n    def format_string(opts = {})\r\n      log_string = \"#{opts[:user]},#{opts[:addr]},#{opts[:page]},#{opts[:site]},#{opts[:time]},#{opts[:referrer]}\"\r\n      puts log_string if defined?(DEBUG_REQUESTS)\r\n      return log_string\r\n    end\r\n    \r\n  end\r\n\r\nend\r\n\r\nif $0 == __FILE__\r\n  DEBUG_REQUESTS = true if (ARGV.length \u003E 1 and ARGV[1].to_s == \"debug\") \r\n  app = SuttoNet::VisitTracker.new(:sites_file =\u003E \"sites.yml\", :log =\u003E \"hits.log\")\r\n  Rack::Handler::Mongrel.run app, :Port =\u003E (ARGV[0] || \"9292\")\r\nend\u003C/code\u003E\r\n\r\n\u003Cp\u003E\u003Cstrong\u003Esites.yml\u003C/strong\u003E:\u003C/p\u003E\r\n\u003Ccode class=\"yaml\"\u003Enhblog: http://blog.ninjahideout.com\u003C/code\u003E\r\n\r\n\u003Ch4\u003EAbout the application\u003C/h4\u003E\r\n\u003Cp\u003EFirst off, I designed it to be used in two scenarios - by itself, and in rackup configurations. If you want to try just by itself, you can use: \u003Cstrong class=\"sh\"\u003Eruby visittracker.rb {port} [debug]\u003C/strong\u003E. Adding debug just gives nifty debug output.\u003C/p\u003E\r\n\r\n\u003Cp\u003EWhenever the application is hit with a request of \u003Cstrong\u003E/hits/{key}\u003C/strong\u003E, it will hit the Site's config class (\u003Cstrong class=\"ruby\"\u003ESuttoNet::SiteHash\u003C/strong\u003E) to check if it exists. We load these hashes from a config file at startup. The server then uses this plus the current time and the referrer (among other items) and logs it to a file. We use a buffered logger to avoiding hitting the file all the time - instead hitting every 100 requests unless it's been 15 minutes since the last request.\u003C/p\u003E\r\n\r\n\u003Cp\u003EWe then respond with a simple HTML page (generated via Markaby on first request) noting that there was a hit to the site. All in all, a very simple and relatively efficient hit tracker.\u003C/p\u003E\r\n\r\n\u003Ch4\u003EUsage\u003C/h4\u003E\r\n\r\n\u003Cp\u003EIf you're using rails, theres a simple helper you can add - but change the VisitTracker host to your own.\u003C/p\u003E\r\n\r\n\u003Ccode class=\"ruby\"\u003E  def visit_tracker(name, server = \"http://hits.ninjahideout.com/\")\r\n    url = server + \"hits/#{name}?page=#{URI.escape(request.request_uri)}\"\r\n    content_tag(:iframe, \"\", :src =\u003E url, :style =\u003E \"display: none\", :id =\u003E \"visittracker\")\r\n  end\u003C/code\u003E\r\n  \r\n\u003Cp\u003Ewhich can then be called via..\u003C/p\u003E\r\n\r\n\u003Ccode class=\"ruby\"\u003E\u003C%= visit_tracker 'sitename' %\u003E\u003C/code\u003E\r\n\r\n\u003Cp\u003EAnd finally, the following is the script I use on my server (run via \u003Cstrong\u003Esudo ./start_visittracker\u003C/strong\u003E:\u003C/p\u003E\r\n\r\n\u003Cp\u003E\u003Cstrong\u003Estart_visittracker\u003C/strong\u003E\u003C/p\u003E\r\n\r\n\u003Ccode class=\"ruby\"\u003E#!/usr/bin/ruby\r\nrequire 'visittracker'\r\nrequire 'thin'\r\n\r\nVISIT_TRACKER_ROOT = \"/etc/visittracker\"\r\n\r\nclass VisitTrackerController\r\n\r\n  def self.start(port = \"6789\")\r\n    puts \"Starting VisitTracker on Port #{port}...\"\r\n    fork do\r\n      File.open(\"#{VISIT_TRACKER_ROOT}/vt.#{port}.pid\", \"w+\") do |f|\r\n        f.write(Process.pid)\r\n      end\r\n      app = SuttoNet::VisitTracker.new(:sites_file =\u003E \"#{VISIT_TRACKER_ROOT}/sites.yml\", :log =\u003E \"#{VISIT_TRACKER_ROOT}/hits.log\")\r\n      Rack::Handler::Thin.run app, :Port =\u003E port\r\n    end\r\n  end\r\n\r\n  def self.stop(port = \"6789\")\r\n    puts \"Stopping VisitTracker on Port #{port}...\"\r\n    if File.exist?(\"#{VISIT_TRACKER_ROOT}/vt.#{port}.pid\")\r\n      pid = File.read(\"#{VISIT_TRACKER_ROOT}/vt.#{port}.pid\").to_i\r\n      Process.kill(1, pid) unless pid == 0\r\n      File.open(\"#{VISIT_TRACKER_ROOT}/vt.#{port}.pid\", \"w+\") do |f|\r\n        f.write \"\"\r\n      end\r\n    else\r\n      puts \"Process not running (atleast not on the specified port)\"\r\n      exit(1)\r\n    end\r\n  end\r\n  \r\n  def self.restart(port = \"6789\")\r\n    self.stop(port)\r\n    self.start(port)\r\n  end\r\n  \r\nend\r\n\r\ncase ARGV[0]\r\n  when nil, \"start\"\r\n    VisitTrackerController.start\r\n  when \"stop\"\r\n    VisitTrackerController.stop\r\n  when \"restart\"\r\n    VisitTrackerController.restart\r\nend\u003C/code\u003E", "state": "published", "created_at": "2008/01/14 22:58:50 +0000"}, {"slug": "the-road-to-atm", "updated_at": "2008/02/13 15:29:27 +0000", "title": "The road to ATM", "posting_type": "post", "id": 7, "category_id": 2, "published_at": "2008/02/01 03:46:18 +0000", "contents": "\u003Cp\u003EFor the last year or so, I've been planning on launching a new project - something different to what I've worked on (e.g. this blog) with commercial viability. In other words, I've dreamt of working on a startup-style company (A dream I actually achieved in late 2007 when I joined the \u003Ca href=\"http://www.whygosolo.com\" title=\"WhyGoSolo\"\u003EWhyGoSolo\u003C/a\u003E team) with the aim of launching something I think would be pretty damn cool.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Cp\u003EAdmittedly, My natural tendency to be lazy kind of stopped these plans - What free time I had I usually spent it focusing on all sorts of random crap such as browsing Digg, Posting on Pownce or even just reading forums. With 2008 now well under way (and with 1 month out of 12 completed with little to show for it), I've decided it's finally time to bring the idea into fruition and to actually blog about the process in an attempt to encourage myself \u003Cstrong\u003Enot\u003C/strong\u003E to be lazy and to actually work on it. So, I'm here today in part one of what I hope will be a regular series - \u003Cstrong\u003EThe coding adventures of a wannabe Ninja\u003C/strong\u003E.\u003C/p\u003E\r\n\r\n\u003Cp\u003EThe original idea for the project is not mine (that honor goes to a good friend and my business partner on it) and so I'm going to have to be a tad abstract at time - I mean, it isn't a new concept but there are some cool twists in our plans for \u003Cstrong\u003E\u003Cabbr title=\"Semi-secret project\"\u003EATM\u003C/abbr\u003E\u003C/strong\u003E (some sort of code name for the project ;)). I think the best description I can give is one I mentioned to some friends a while ago when discussing it:\u003C/p\u003E\r\n\r\n\u003Cblockquote\u003EIt's like Ebay meets Amazon meets Shopify meets a cake made of cool.\u003C/blockquote\u003E\r\n\r\n\u003Cp\u003EIf your paying attention then you've probably noticed already that even the choice of wording makes it seem naive and quite possibly \"almost impossible\" - in fact, it's more about aiming high; even if I can't implement everything I'd like to, the motivation is there to implement the 90% (the first, easy 80% + the next harder 10%) of features which will make ATM what it is.\u003C/p\u003E\r\n\r\n\u003Cp\u003EI hope you've found what I've written today intriguing and that you'll follow me as I go on the journey of building \u003Cstrong\u003E\u003Cabbr title=\"Semi-secret project\"\u003EATM\u003C/abbr\u003E\u003C/strong\u003E.\u003C/p\u003E", "state": "published", "created_at": "2008/02/01 03:35:46 +0000"}, {"slug": "commenting-fixed", "updated_at": "2008/02/02 09:37:40 +0000", "title": "Commenting == Fixed", "posting_type": "post", "id": 8, "category_id": 2, "published_at": "2008/02/02 09:37:40 +0000", "contents": "\u003Cp\u003EI only realised earlier tonight that I'd made a big boo-boo with the blog - commenting required you to be logged in, something which was restricted to Admin users. So, I've since fixed that (as well as a few bugs you likely wouldn't have seen before) and all \u003Cstrong\u003Eseems\u003C/strong\u003E to be working well know.\u003C/p\u003E", "state": "published", "created_at": "2008/02/02 09:35:54 +0000"}, {"slug": "learning-languages", "updated_at": "2008/02/03 04:09:52 +0000", "title": "Learning Languages", "posting_type": "post", "id": 9, "category_id": 2, "published_at": "2008/02/03 04:09:09 +0000", "contents": "\u003Cp\u003EAs a programmer, one of the things I enjoy the most is the structure of languages - how inherently different styling can mould the experience I have when learning it. As an offshoot of this, I've slowly become interested in different programming languages and how they can be used in everyday life.\u003C/p\u003E\r\n\u003Csplit /\u003E\r\n\u003Cp\u003EA prime example of this is \u003Ca href=\"http://www.python.org/\" title=\"Official Python Website\"\u003EPython\u003C/a\u003E, a language I spent some time with in order to compete in the \u003Ca href=\"http://www.ncss.edu.au/\" title=\"NCSS Website\"\u003ENCSS Challenge\u003C/a\u003E in 2007 (something I advise all budding programmers take part in - I wish I'd discovered it earlier). Or even the language I'm currently reading about, \u003Ca href=\"http://www.erlang.org/\" title=\"Official Erlang Site\"\u003EErlang\u003C/a\u003E - my first attempt at learning a functional programming language - one I must say has opened my mind up to an alternate way of programming.\u003C/p\u003E\r\n\r\n\u003Cp\u003EOver the next year, I plan on not only spending my time focusing on working on some projects - both \u003Ca href=\"http://www.whygosolo.com/\" title=\"WhyGoSolo\"\u003Eas a job\u003C/a\u003E and as \u003Ca href=\"/projects\" title=\"My Projects Section\"\u003Ea hobby\u003C/a\u003E - as well as learning several new languages.\u003C/p\u003E\r\n\r\n\u003Cp\u003EThe first set are ones my courses at UWA (First Year, hell yeh!) are apparently going to cover - First off, we have \u003Ca href=\"http://www.haskell.org/\" title=\"Haskell Website\"\u003EHaskell\u003C/a\u003E, a language I've wanted to learn for a while but have never really had a reason to until now. Following up from that there's a language I'm not looking forward to but I'm willing to learn - there is \u003Ca href=\"http://java.sun.com/\" title=\"Sun's Java pages\"\u003EJava\u003C/a\u003E. Hey, maybe it'll give a push to finally learn \u003Ca href=\"http://groovy.codehaus.org/\" title=\"Official Groovy Website\"\u003EGroovy\u003C/a\u003E or even \u003Ca href=\"http://www.scala-lang.org/\" title=\"Official Scala Website\"\u003EScala\u003C/a\u003E. Finally, second semester will introduce the one language I've been meaning to learn and that is considered a prerequisite for a lot of 'serious development' - Good ol' C. Sound's like a lot to cram into one year but the brain-workout it brings with it will surely be worth it.\u003C/p\u003E\r\n\r\n\u003Cp\u003EOf course, with all of those languages, there a still a fair few I'd love to learn - mainly spurned by the cool links that always seem to show up on \u003Ca href=\"http://programming.reddit.com/\" title=\"the programming subreddit\"\u003Ethe programming subreddit\u003C/a\u003E. I've wanted to learn a lisp dialect for a long time (CL seems to be winning out over Scheme due to the huge amount of web development stuff available) as well as wanting to spend some time with \u003Ca href=\"http://arclanguage.org/forum\" title=\"Arc Forums\"\u003EArc\u003C/a\u003E - a new dialect that Paul Graham's been pimping for a while now (although my initial look was disappointing to say the least). There is also the inherent coolness of \u003Ca href=\"http://www.iolanguage.com/about/\" title=\"io site\"\u003Eio\u003C/a\u003E and \u003Ca href=\"http://factorcode.org/\" title=\"Official Factor Site - it has raptors!\"\u003EFactor\u003C/a\u003E and Smalltalk - of which my initial looks at and my wider reading about - have made them seem pretty impressive. So how about you? what languages would \u003Cstrong\u003Eyou\u003C/strong\u003E like to learn?\u003C/p\u003E", "state": "published", "created_at": "2008/02/03 04:08:33 +0000"}, {"slug": "eoraptors-future", "updated_at": "2008/02/04 07:13:47 +0000", "title": "Eoraptor's future", "posting_type": "post", "id": 10, "category_id": 2, "published_at": "2008/02/03 06:14:27 +0000", "contents": "\u003Cp\u003ESince its first inception a few months ago as a merb blogging platform (I'm now running on Rails 2.0), I've always had the aim of releasing Eoraptor (the software that powers this blog) under an open source license. The platform still has its kinks (as you are \u003Ca href=\"http://blog.ninjahideout.com/posts/commenting-fixed\" title=\"Woops! b0rked commenting\"\u003Eno doubt aware\u003C/a\u003E) but I'm planning on releasing it as open source once I've finished a couple of items off. Primarily,\u003C/p\u003E\r\n\r\n\u003Col\u003E\r\n  \u003Cli\u003ESpec's for the entire site - I've been pretty lazy so far in this regard\u003C/li\u003E\r\n  \u003Cli\u003ETwitter / Tumblr / Pownce like integration - I'd ideally like a flow-of-thoughts style front page\u003C/li\u003E\r\n  \u003Cli\u003EFinish off the projects section - it's currently part done but disabled on this blog.\u003C/li\u003E\r\n  \u003Cli\u003EA settings page - to make it easier to administrate\u003C/li\u003E\r\n\u003C/ol\u003E\r\n\r\n\u003Cp\u003EI guess once all of them have been covered, I'll finally release it. For the moment, consider this more as a road map.\u003C/p\u003E", "state": "published", "created_at": "2008/02/03 06:14:22 +0000"}, {"slug": "b0rked-images", "updated_at": "2008/02/04 07:42:51 +0000", "title": "b0rked images", "posting_type": "post", "id": 11, "category_id": 1, "published_at": "2008/02/04 07:42:51 +0000", "contents": "\u003Cp\u003ESo I made it big mistake tonight. It wasn't on purpose - far from it in fact. I was editing the deploy.rb I use to put it on this blog (thank god for Capistrano) to upload some small admin-side fixes. I decided to also make a small change that would make the symbolic linking process for image directories work. Except, I got the wrong directory. I accidentally typed in the shortcut / variable for the actual (non linked) directory to the rm part of the routine. And so, now they're gone. You'll have to just ignore the lack of images for the moment till sometime after the twelfth when I can restore them.\u003C/p\u003E", "state": "published", "created_at": "2008/02/04 07:42:37 +0000"}, {"slug": "erlang-project-euler", "updated_at": "2008/02/08 05:06:04 +0000", "title": "Erlang \u0026 Project Euler", "posting_type": "post", "id": 13, "category_id": 2, "published_at": "2008/02/06 09:05:12 +0000", "contents": "\u003Cp\u003EJust a quick and fairly simple post. I've been reading\r\nProgramming Erlang over the last few days and decided tonight\r\nto have a quick play with the Project Euler problems (having\r\n never done them before). Here ~10 minutes work :)\u003C/p\u003E\r\n\r\n\u003Ccode class=\"erlang\"\u003E\r\n%% Erlang Solution to Project Euler Problem #2\r\n%% \"Sum of all even primes under one million\"\r\n%% Written by Darcy Laycock\r\n%% http://blog.ninjahideout.com/\r\n\r\n-module(pe).\r\n-compile(export_all).\r\n\r\nstart() -\u003E\r\n  process(1000000).\r\n\r\nprocess(Max) -\u003E\r\n  io:format(\"Calculating All Even Fib. Under ~p~n\", [Max]),\r\n  evenFactorialsUnder(1, 1, Max, 0).\r\n\r\nprintResults(0) -\u003E\r\n  io:format(\"No Known Results.~n\");\r\nprintResults(Results) -\u003E\r\n  io:format(\"Found Result:~n~p~n\", [Results]).\r\n\r\nevenFactorialsUnder(A, B, Max, Acc) when A+B \u003E Max -\u003E\r\n  printResults(Acc);\r\nevenFactorialsUnder(A, B, Max, Acc) -\u003E\r\n  NewNum = A + B,\r\n  case NewNum rem 2 of\r\n    0 -\u003E %% even\r\n      evenFactorialsUnder(NewNum, A, Max, Acc + NewNum);\r\n    1 -\u003E %% odd\r\n      evenFactorialsUnder(NewNum, A, Max, Acc)\r\n  end.\r\n\u003C/code\u003E\r\n\r\n\u003Cp\u003E\u003Cstrong\u003EEdit:\u003C/strong\u003E More of these coming tonight :) Simple but fun!\u003C/p\u003E\r\n", "state": "published", "created_at": "2008/02/06 07:57:04 +0000"}, {"slug": "eoraptor-extracts-preparesrb", "updated_at": "2008/02/08 06:24:11 +0000", "title": "Eoraptor Extracts - \"Prepares.rb\"", "posting_type": "post", "id": 14, "category_id": 2, "published_at": "2008/02/08 06:24:11 +0000", "contents": "\u003Cp\u003EJust a simple one to start off today - This is a piece of code I've reused quite a few times and it's really saved me a lot of coding time retyping the same thing. In essence, \u003Cstrong\u003Eprepares\u003C/strong\u003E is a single drop in file for rails that adds a few niceties - basically preparing a model instance (via find) and storing it in an instance variable.\u003C/p\u003E\r\n\u003Csplit /\u003E\r\n\r\n\u003Cp\u003EFor example, if you want to prepare the model \u003Cstrong\u003EPost\u003C/strong\u003E in the current controller on a certain set of actions, you may use this -\u003C/p\u003E\r\n\r\n\u003Ccode class=\"ruby\"\u003Eprepares :post, :only =\u003E [:show, :edit, :update, :destroy, :publish]\u003C/code\u003E\r\n\r\n\u003Cp\u003EYou have \u003Cstrong\u003E:only\u003C/strong\u003E and \u003Cstrong\u003E:except\u003C/strong\u003E options which can be passed straight into the before filter it builds. Other options include:\u003C/p\u003E\r\n\r\n\u003Cul\u003E\r\n  \u003Cli\u003E\u003Cstrong\u003E:instance_var\u003C/strong\u003E - the alternative instance variable name to use\u003C/li\u003E\r\n  \u003Cli\u003E\u003Cstrong\u003E:params_key\u003C/strong\u003E - what params attribute to use\u003C/li\u003E\r\n  \u003Cli\u003E\u003Cstrong\u003E:if\u003C/strong\u003E - a string (same as ruby code) which will be called if passed in e.g. a method (:action_name) - it's eval'ed\u003C/li\u003E\r\n  \u003Cli\u003E\u003Cstrong\u003E:model\u003C/strong\u003E - An alternate model to use; can either be a class (on which to_s is called for the name) or a symbol e.g. :blog_post -\u003E BlogPost\u003C/li\u003E\r\n\u003C/ul\u003E\r\n\r\n\u003Cp\u003EThere are no tests / documentation for it other than this (it's something I need to work on) but it in use on this blog. Oh, if you pick up an error, let me know - I chopped out some parts of it at the last minute.\u003C/p\u003E\r\n\r\n\u003Ch3\u003EUsing it\u003C/h3\u003E\r\n\u003Cp\u003EJust add \u003Cstrong\u003Eprepares.rb\u003C/strong\u003E to your \u003Cstrong\u003Elib\u003C/strong\u003E subdirectory of rails with this code; then add:\u003C/p\u003E\r\n\u003Ccode class=\"ruby\"\u003Einclude Prepares::ControllerMixin\u003C/code\u003E\r\n\u003Cp\u003Eto your application controller / whichever controllers you want to use it.\u003C/p\u003E\r\n\r\n\u003Ch3\u003EThe Source\u003C/h3\u003E\r\n\u003Cp\u003EUse it, even if your name isn't Luke and it isn't \"The Force\".\u003C/p\u003E\r\n\r\n\u003Ccode class=\"ruby\"\u003E# prepares.rb - Copyright Darcy R. Laycock, 2008\r\n# http://blog.ninjahideout.com\r\n# Use as you want but please keep this header up top.\r\nmodule Prepares\r\n  \r\n  module ControllerMixin\r\n    def self.included(parent)\r\n      parent.class_eval do\r\n        extend Prepares::ClassMethods\r\n        include Prepares::InstanceMethods\r\n      end\r\n    end\r\n  end\r\n  \r\n  module ClassMethods\r\n    \r\n    def prepares(name, opts = {})\r\n      raise ArgumentError unless opts.is_a?(Hash)\r\n      opts.assert_valid_keys(:instance_var, :model, :except, :only, :params_key, :if)\r\n      params_key = opts[:params_key] || :id\r\n      instance_var_name = \"@#{(opts[:instance_var] || name).to_s.gsub(/^[@]+/, \"\")}\"\r\n      conditionals = opts.delete(:if) || nil\r\n      pmodel = get_prepares_model(opts[:model] || name)\r\n      method_name = :\"prepares_#{name.to_s.underscore}\"\r\n      method =  \"def #{method_name}\\n\"\r\n      method \u003C\u003C \"if #{conditionals}\\n\" if conditionals\r\n      method \u003C\u003C \"   #{instance_var_name} = #{pmodel}.find(params[:#{params_key}])\\n\"\r\n      method \u003C\u003C \" end\\n\" if conditionals\r\n      method \u003C\u003C \"end\\n\"\r\n      before_filter_opts = {}\r\n      before_filter_opts[:except] = opts[:except].to_a unless opts[:except].blank? || opts[:except].to_a.empty?\r\n      before_filter_opts[:only] = opts[:only].to_a unless opts[:only].blank? || opts[:only].to_a.empty?\r\n      class_eval do\r\n        before_filter method_name, before_filter_opts\r\n      end\r\n      self.class_eval method\r\n    end\r\n    \r\n    private\r\n    \r\n    def get_prepares_model(pmodel)\r\n      if pmodel.is_a?(Symbol)\r\n        return pmodel.to_s.classify\r\n      else\r\n        return pmodel.to_s\r\n      end\r\n    end\r\n    \r\n  end\r\n  \r\n  module InstanceMethods # if it needs to be included.\r\n  end\r\n  \r\nend\u003C/code\u003E", "state": "published", "created_at": "2008/02/08 06:23:07 +0000"}, {"slug": "now-extra-thin", "updated_at": "2008/02/13 15:29:17 +0000", "title": "Now extra thin!", "posting_type": "post", "id": 15, "category_id": 2, "published_at": "2008/02/08 08:39:09 +0000", "contents": "\u003Cp\u003EAnd in other news, I upgraded the blog to Thin tonight. The\r\nextra speed and power was a nice incentive to switch as\r\nwas the whole 'coolness factor'. Next up is rewriting the stats\r\nserver. So \u003Cstrong\u003E+1\u003C/strong\u003E Kudos for thin!.\u003C/p\u003E", "state": "published", "created_at": "2008/02/08 08:38:44 +0000"}, {"slug": "on-atm-user-models-code", "updated_at": "2008/02/12 12:48:38 +0000", "title": "On ATM - User models / code", "posting_type": "post", "id": 17, "category_id": 2, "published_at": "2008/02/12 05:18:29 +0000", "contents": "\u003Cp\u003EOne of the core areas (well, the main core area - it's the main apart of the application that is shared between all of the applications that make up \u003Cabbr title=\"Semi-secret project\"\u003EATM\u003C/abbr\u003E) is the user management system. Built from the ground up (e.g. not using Restful Authentication itself) it combines lessons learnt from my experience using other systems.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Cp\u003EFor starters, much of the user model is extracted into external mixins for easy modification / reuse - there is an integrated level-based role system which makes it easy to give access to certain areas of the website and there are separate sub-modules for each section such as Predicates, Callbacks and Class Methods.\u003C/p\u003E\r\n\r\n\u003Cp\u003ETo make authentication management easier, We've another library we've written to deal specifically with Password / Salt generation - by default salts are generated to be \u003Cstrong\u003Eextremely\u003C/strong\u003E strong whilst randomly generated passwords are made using the ngrams library to make them easy to memorize.\u003C/p\u003E\r\n\r\n\u003Cp\u003ELastly, each section is being covered by an extensive system of RSpec as seems proper these days in order to make it easily testable.\u003C/p\u003E", "state": "published", "created_at": "2008/02/12 04:47:10 +0000"}, {"slug": "on-atm-subapp-syncing", "updated_at": "2008/06/30 16:45:13 +0000", "title": "On ATM - SubApp Syncing", "posting_type": "post", "id": 18, "category_id": 2, "published_at": "2008/02/12 09:59:15 +0000", "contents": "\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Untitled\" src=\"/uploads/datas/100/original/Untitled.png?1214844017\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003ETo better manage the \u003Cabbr title=\"Semi-secret project\"\u003EATM\u003C/abbr\u003E code base, one of the first decisions I made was to have several different sub apps. Each sub app will basically inherit all models etc from the site core as well as libraries etc. One of the key pieces of software in the current \u003Cabbr title=\"Semi-secret project\"\u003EATM\u003C/abbr\u003E code base is \u003Cabbr title=\"Semi-secret project\"\u003EATM\u003C/abbr\u003E Tools - a small library designed make it easier to sync different apps from the core.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Cp\u003EIn essence there are 3 main functions (and it might be a good idea to introduce the opposite of one of them) - \"subapps\" (which lists them all), \"subapp\" (which adds a new subapp) and last, but not least, \"sync\" which syncs all subapps from the Core application.\u003C/p\u003E\r\n\r\n\u003Cp\u003EWorking with git makes each of these incredibly easy - hell, adding a new sub app (without any changes) is incredibly fast because of the way git works. You can expect to see some of the code from this on here soon - hopefully in an easily manageable form.\u003C/p\u003E", "state": "published", "created_at": "2008/02/12 09:58:40 +0000"}, {"slug": "busting-a-cap-in-yo-ass", "updated_at": "2008/02/14 03:47:47 +0000", "title": "Busting a cap in yo' ass!", "posting_type": "post", "id": 19, "category_id": 2, "published_at": "2008/02/14 03:37:23 +0000", "contents": " \u003Cp\u003EOk, the titles lame but I hope the contents aren't. Today I'll be running through a quick Capistrano config - perfect for if your running on a VPS - that has a heap of free goodies included. Also, thanks to Skiz on #offrails for a nice start earlier after I lost some of my stuff.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Ch4\u003EOrigin\u003C/h4\u003E\r\n\r\n\u003Cp\u003EOne of my aim's when writing this config was to make it as standard as possible - I mean, you'd have no problems running it on say a dedicated server \u003Cstrong\u003Ebut\u003C/strong\u003E there may be issues running it on say DreamHost (I'll add one for them later). Anyway, without further ado, I present the ultimate Capistrano config file of \u003Cstrong\u003EDooooom!\u003C/strong\u003E. Just edit your SCM Details + The App Name, setup Nginx and it's pretty much done.\u003C/p\u003E\r\n\r\n\u003Ch4\u003EStandard Features\u003C/h4\u003E\r\n\r\n\u003Cul\u003E\r\n\t\u003Cli\u003EChoice between Thin / Mongrel Cluster for your Application Server with automatic config file generation.\u003C/p\u003E\r\n\t\u003Cli\u003EChoice to use sqlite3 for your production database - and to handle most aspects of deploying with it.\u003C/li\u003E\r\n\t\u003Cli\u003EAutomatically linked public/images/uploaded folder\u003C/li\u003E\r\n\t\u003Cli\u003EMagic! (Just kidding ;))\u003C/li\u003E\r\n\t\u003Cli\u003EEffortless deployment (seriously, it's bloody easy).\u003C/li\u003E\r\n\u003C/ul\u003E\r\n\r\n\u003Ch4\u003EThe Code\u003C/h4\u003E\r\n\r\n\u003Ccode class=\"ruby\"\u003E# Application Specific Details\r\nset :application, \"\"\r\nset :domain, \"\"\r\nset :deploy_via, :export\r\nset :repository,  \"\"\r\nset :scm_username, \"\"\r\nset :scm_password, \"\"\r\n\r\n## Magic Starts. N.B. You can set variables before if you'd like\r\n\r\n# Suitable for a vps-style system\r\n# where each part is on the same domain.\r\n\r\n# Location\r\nset :deploy_to, \"/var/apps/#{application}\"\r\n\r\n# Deployment details\r\nset :user,   \"deploy\"      unless exists?(:user)\r\nset :runner, user          unless exists?(:runner)\r\nset :server_type, :thin    unless exists?(:server_type)\r\nset :deploy_port, 9000     unless exists?(:deploy_port)\r\nset :cluster_instances, 3  unless exists?(:cluster_instances)\r\nset :use_sqlite3, true     unless exists?(:use_sqlite)\r\nset :keep_releases, 3      unless exists?(:keep_releases)\r\n\r\n\r\n\r\n# Paths\r\nset :shared_database_path,        \"#{shared_path}/databases\"\r\nset :shared_config_path,          \"#{shared_path}/configs\"\r\nset :shared_uploaded_images_path, \"#{shared_path}/uploaded_images\"\r\nset :public_uploaded_images_path, \"#{current_path}/public/images/uploaded\"\r\n\r\n# Our helper methods\r\n\r\ndef public_configuration_location_for(server = :thin)\r\n  \"#{current_path}/config/#{server}.yml\"\r\nend\r\n\r\ndef shared_configuration_location_for(server = :thin)\r\n  \"#{shared_config_path}/#{server}.yml\"\r\nend\r\n\r\n# Our Server Roles\r\nrole :app, domain.to_s\r\nrole :web, domain.to_s\r\nrole :db,  domain.to_s, :primary =\u003E true\r\n\r\nnamespace :configuration do\r\n  \r\n  desc \"Links the local copies of the shared images folder\"\r\n  task :localize, :roles =\u003E :app do\r\n    run \"rm -rf  #{public_uploaded_images_path}\" # God. Damned. Reversing it removes ALL images. Not fun.\r\n    run \"ln -nsf #{shared_uploaded_images_path} #{public_uploaded_images_path}\"\r\n  end\r\n  \r\n  desc \"Makes link for database\"\r\n  task :make_default_folders, :roles =\u003E :app do\r\n    run \"mkdir -p #{shared_config_path}\"\r\n    run \"mkdir -p #{shared_uploaded_images_path}\"\r\n  end\r\n  \r\nend\r\n\r\n# Application Server Choices\r\n\r\nnamespace :mongrel do\r\n  \r\n  desc \"Generate a mongrel configuration file\"\r\n  task :build_configuration, :roles =\u003E :app do\r\n    config_options = {\r\n      \"user\"        =\u003E (runner || user),\r\n      \"group\"       =\u003E (runner || user),\r\n      \"log_file\"    =\u003E \"#{current_path}/log/mongrel.log\",\r\n      \"cwd\"         =\u003E current_path,\r\n      \"port\"        =\u003E deploy_port,\r\n      \"servers\"     =\u003E cluster_instances,\r\n      \"environment\" =\u003E \"production\",\r\n      \"address\"     =\u003E \"localhost\",\r\n      \"pid_file\"    =\u003E \"#{current_path}/tmp/pids/mongrel.pid\"\r\n    }.to_yaml\r\n    put config_options, shared_configuration_location_for(:mongrel)\r\n  end\r\n  \r\n  desc \"Links the configuration file\"\r\n  task :link_configuration_file, :roles =\u003E :app do\r\n    run \"ln -nsf #{shared_configuration_location_for(:mongrel)} #{public_configuration_location_for(:mongrel)}\"\r\n  end\r\n  \r\n  desc \"Setup Mongrel Cluster After Code Update\"\r\n  task :link_global_configuration, :roles =\u003E :app do\r\n    run \"ln -nsf /etc/mongrel_cluster/#{application}.yml\"\r\n  end\r\n  \r\n  %w(start stop restart).each do |action|\r\n  desc \"#{action} this app's Mongrel Cluster\"\r\n    task action.to_sym, :roles =\u003E :app do\r\n      run \"mongrel_rails cluster::#{action} -C #{shared_configuration_location_for(:mongrel)}\"\r\n    end\r\n  end\r\n  \r\nend\r\n\r\nnamespace :thin do\r\n  \r\n  desc \"Generate a thin configuration file\"\r\n  task :build_configuration, :roles =\u003E :app do\r\n    config_options = {\r\n      \"user\"        =\u003E (runner || user),\r\n      \"group\"       =\u003E (runner || user),\r\n      \"log\"    =\u003E \"#{current_path}/log/thin.log\",\r\n      \"chdir\"         =\u003E current_path,\r\n      \"port\"        =\u003E deploy_port,\r\n      \"servers\"     =\u003E cluster_instances.to_i,\r\n      \"environment\" =\u003E \"production\",\r\n      \"address\"     =\u003E \"localhost\",\r\n      \"pid\"    =\u003E \"#{current_path}/tmp/pids/log.pid\"\r\n    }.to_yaml\r\n    put config_options, shared_configuration_location_for(:thin)\r\n  end\r\n  \r\n  desc \"Links the configuration file\"\r\n  task :link_configuration_file, :roles =\u003E :app do\r\n    run \"ln -nsf #{shared_configuration_location_for(:thin)} #{public_configuration_location_for(:thin)}\"\r\n  end\r\n  \r\n  desc \"Setup Thin Cluster After Code Update\"\r\n  task :link_global_configuration, :roles =\u003E :app do\r\n    run \"ln -nsf #{shared_configuration_location_for(:thin)} /etc/thin/#{application}.yml\"\r\n  end\r\n  \r\n  %w(start stop restart).each do |action|\r\n  desc \"#{action} this app's Thin Cluster\"\r\n    task action.to_sym, :roles =\u003E :app do\r\n      run \"thin #{action} -C #{shared_configuration_location_for(:thin)}\"\r\n    end\r\n  end\r\n  \r\nend\r\n\r\n# Our Database Stuff - currently only sqlite3\r\nnamespace :sqlite3 do\r\n  \r\n  desc \"Generate a database configuration file\"\r\n  task :build_configuration, :roles =\u003E :db do\r\n    db_options = {\r\n      \"adapter\"  =\u003E \"sqlite3\",\r\n      \"database\" =\u003E \"db/production.sqlite3\"\r\n    }\r\n    config_options = {\"production\" =\u003E db_options}.to_yaml\r\n    put config_options, \"#{shared_config_path}/sqlite_config.yml\"\r\n  end\r\n  \r\n  desc \"Links the configuration file\"\r\n  task :link_configuration_file, :roles =\u003E :db do\r\n    run \"ln -nsf #{shared_config_path}/sqlite_config.yml #{current_path}/config/database.yml\"\r\n    run \"touch #{shared_database_path}/production.sqlite3\"\r\n    run \"ln -nsf #{shared_database_path}/production.sqlite3 #{current_path}/db/production.sqlite3\" \r\n  end\r\n  \r\n  desc \"Make a shared database folder\"\r\n  task :make_shared_folder, :roles =\u003E :db do\r\n    run \"mkdir -p #{shared_database_path}\"\r\n  end\r\n  \r\nend\r\n\r\n# Our Global Web Server - NGINX :D\r\nnamespace :nginx do \r\n  desc \"Start Nginx on the app server.\"\r\n  task :start, :roles =\u003E :web do\r\n    run \"/etc/init.d/nginx start\"\r\n  end\r\n\r\n  desc \"Restart the Nginx processes on the app server by starting and stopping the cluster.\"\r\n  task :restart , :roles =\u003E :web do\r\n    run \"/etc/init.d/nginx restart\"\r\n  end\r\n\r\n  desc \"Stop the Nginx processes on the app server.\"\r\n  task :stop , :roles =\u003E :web do\r\n    run \"/etc/init.d/nginx stop\"\r\n  end\r\n  \r\n  desc \"Stop the Nginx processes on the app server.\"\r\n  task :reload , :roles =\u003E :web do\r\n    run \"/etc/init.d/nginx stop\"\r\n  end\r\n\r\n  %w(start stop restart reload).each do |action|\r\n    desc \"#{action} the Nginx processes on the web server.\"\r\n    task action.to_sym , :roles =\u003E :web do\r\n      run \"/etc/init.d/nginx #{action}\"\r\n    end\r\n  end\r\n  \r\nend\r\n\r\n# Our magic\r\n\r\nnamespace :deploy do\r\n\r\n  %w(start stop restart).each do |action|\r\n    desc \"#{action} our server\"\r\n    task action.to_sym do\r\n      find_and_execute_task(\"#{server_type}:#{action}\")\r\n    end\r\n  end\r\n\r\nend\r\n\r\n# After Tasks\r\nafter \"deploy:setup\",   \"configuration:make_default_folders\"\r\nafter \"deploy:setup\",   \"#{server_type}:build_configuration\"\r\n\r\n#after \"#{server_type}:build_configuration\", \"#{server_type}:link_global_configuration\"\r\n\r\nafter \"deploy:symlink\", \"configuration:localize\"\r\nafter \"deploy:symlink\", \"#{server_type}:link_configuration_file\"\r\n\r\nif use_sqlite3\r\n  after \"deploy:setup\", \"sqlite3:make_shared_folder\"\r\n  after \"deploy:setup\", \"sqlite3:build_configuration\"\r\n  after \"deploy:symlink\", \"sqlite3:link_configuration_file\"\r\nend\u003C/code\u003E", "state": "published", "created_at": "2008/02/13 17:56:47 +0000"}, {"slug": "rackurlmap-and-kicking-ass", "updated_at": "2008/02/17 22:36:51 +0000", "title": "Rack::URLMap and kicking ass.", "posting_type": "post", "id": 20, "category_id": 2, "published_at": "2008/02/17 22:36:51 +0000", "contents": "\u003Cp\u003ERack come's with a lot of excellent middleware out of the box, making a lot of seriously cool things possible. One of the most important of these middleware's is URLMap - a little gem that lets you map different url paths to different rack applications. Using Rack::Builder / rackup syntax you can use the map method with a block to define a different urled application.\u003C/p\u003E\r\n\u003Csplit /\u003E\r\n\u003Cp\u003EFor example, we'll start by writing a little proc based app (thank's to the fact rack uses the call method) that will simple print the SCRIPT_NAME and PATH_INFO parts of the request.\u003C/p\u003E\r\n\r\n\u003Ccode class=\"ruby\"\u003Eour_test_app = lambda do |env|\r\n  path = env['PATH_INFO']\r\n  script = env['SCRIPT_NAME']\r\n  out = \u0026quot;\u0026lt;strong\u0026gt;Path:\u0026lt;/strong\u0026gt;#{path}\u0026lt;br /\u0026gt;\u0026lt;strong\u0026gt;Script:\u0026lt;/strong\u0026gt;#{script}\u0026quot;\r\n  return [200, {\u0026quot;Content-Type\u0026quot; =\u0026gt; \u0026quot;text/html\u0026quot;}, [out]]\r\nend\u003C/code\u003E\r\n\r\n\u003Cp\u003ENext, we're going to map a few different url's to this application to see the effect each has. Using Rack::Builder / rackup format, we can simply write a standard application declaration (e.g. using use / run etc) under a block calling the map method. e.g.:\u003C/p\u003E\r\n\r\n\u003Ccode class=\"ruby\"\u003Emap \"/\" do\r\n  use Rack::CommonLogger  \r\n  run our_test_app\r\nend\u003C/code\u003E\r\n\r\n\u003Cp\u003EOr alternatively, for the hell of it, we decide we want to also mount Rack::Lobster under '/lobster'. Note here though as well that we might get exceptions so we also add in the Rack::ShowExceptions middleware.\u003C/p\u003E\r\n\r\n\u003Ccode class=\"ruby\"\u003Emap \"/lobster\" do\r\n  use Rack::ShowExceptions\r\n  run Rack::Lobster.new\r\nend\u003C/code\u003E\r\n\r\n\u003Cp\u003ENow, finally, we're going to mount a couple more test app's. It's important to note Rack::URLMap will check longer urls first.\u003C/p\u003E\r\n\r\n\u003Ccode class=\"ruby\"\u003Emap \"/ninjas\" do\r\n run our_test_app\r\nend\r\n\r\nmap \"/aloha\" do\r\n run our_test_app\r\nend\r\n\r\nmap \"/ninjas/second_app\" do\r\n run our_test_app\r\nend\r\n\r\nmap \"/lobster/another-app\" do\r\n run our_test_app\r\nend\u003C/code\u003E\r\n\r\n\u003Cp\u003ENow that we've done that, we should have the following app's available:\u003C/p\u003E\r\n\r\n\u003Col\u003E\r\n  \u003Cli\u003Eour test application mounted at \"/ninjas\", \"/aloha\", \"/ninjas/second_app\", \"/lobster/another-app\" and \"/\"\u003C/li\u003E\r\n  \u003Cli\u003ERack::Lobster mounded at \"/lobster\"\u003C/li\u003E\r\n\u003C/ol\u003E\r\n\r\n\u003Cp\u003ENow, we can combine all of this into one file that you'll need to save as a rackup file - in my case, \"rack-urlmap-demo.ru\" (it needs the .ru extension for rack up to work correctly). So you don't have to copy it all again, I've put it all below:\u003C/p\u003E\r\n\r\n\u003Ccode class=\"ruby\"\u003Erequire 'rack/lobster'\r\n\r\n\r\nour_test_app = lambda do |env|\r\n  path = env['PATH_INFO']\r\n  script = env['SCRIPT_NAME']\r\n  out = \u0026quot;\u0026lt;strong\u0026gt;Path:\u0026lt;/strong\u0026gt;#{path}\u0026lt;br /\u0026gt;\u0026lt;strong\u0026gt;Script:\u0026lt;/strong\u0026gt;#{script}\u0026quot;\r\n  return [200, {\u0026quot;Content-Type\u0026quot; =\u0026gt; \u0026quot;text/html\u0026quot;}, [out]]\r\nend\r\n\r\nuse Rack::Lint\r\n\r\nmap \"/\" do\r\n  use Rack::CommonLogger\r\n  run our_test_app\r\nend\r\n\r\nmap \"/lobster\" do\r\n  use Rack::ShowExceptions\r\n  run Rack::Lobster.new\r\nend\r\n\r\nmap \"/ninjas\" do\r\n run our_test_app\r\nend\r\n\r\nmap \"/aloha\" do\r\n run our_test_app\r\nend\r\n\r\nmap \"/ninjas/second_app\" do\r\n run our_test_app\r\nend\r\n\r\nmap \"/lobster/another-app\" do\r\n run our_test_app\r\nend\u003C/code\u003E\r\n\r\n\u003Cp\u003EObservant readers will notice I also added in the Rack::Lint middleware - which it's important for you to note that this will be run for \u003Cstrong\u003Eevery\u003C/strong\u003E application. Now, start the app by changing to where you saved the file in your terminal and type \"rackup rack-urlmap-demo.ru\". Now, I want you to hit each url we mapped (it should be running on localhost:9292), esp. the \"/lobster\" and \"/lobster/another-app\" AND \"/lobsters\". What do you so? If all goes well, you should have learnt the following:\u003C/p\u003E\r\n\r\n\u003Col\u003E\r\n  \u003Cli\u003E\"/lobster/another-app\" is longer than \"/lobster\" hence it over rides it.\u003C/li\u003E\r\n  \u003Cli\u003E\"/lobsters\" is not the same as \"/lobster\".\u003C/li\u003E\r\n\u003C/ol\u003E\r\n\r\n\u003Cp\u003EAnd there you have it. Rack Middleware combined with Rackup makes it super easy to do cool stuff with your request e.g. multiple applications on one domain.\u003C/p\u003E\r\n\r\n", "state": "published", "created_at": "2008/02/17 22:24:25 +0000"}, {"slug": "current-userstatus", "updated_at": "2008/03/08 15:50:13 +0000", "title": "current_user.status", "posting_type": "post", "id": 22, "category_id": 3, "published_at": "2008/03/08 15:29:24 +0000", "contents": "\u003Cp\u003ETime for another blog post is it? Well, it has been a while. Mainly because I started University. Well, that and a couple other things. So here it is, What I've been doing for the last few weeks:\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Ch3\u003EUniversity\u003C/h3\u003E\r\n\r\n\u003Cp\u003ESo I very recently (e.g. early last week) started University. Yehp, I'm now officially studying \u003Ca href=\"http://web.csse.uwa.edu.au\" title=\"School of Computer Science and Software Engineer\"\u003EComputer Science\u003C/a\u003E at the \u003Ca title=\"UWA Home Page\" href=\"http://www.uwa.edu.au\"\u003EUniversity of Western Australia\u003C/a\u003E. I also joined the \u003Ca href=\"http://ucc.asn.au\" title=\"UCC Website\"\u003EUniversity Computer Club\u003C/a\u003E and the Computer Science Students Club (Although I haven't been to the club room for the former much yet). The best part is that one of my subjects, Foundations of Computer Science, gives me a chance to work with and to learn Haskell. Hells Yeah!\u003C/p\u003E\r\n\r\n\u003Ch3\u003EMy Mac.\u003C/h3\u003E\r\n\r\n\u003Cp\u003EAfter waiting almost four months for Apple to update the Macbook Pro's, they finally did last week - and now I'm just waiting for my brand new one to arrive along with a whole bunch of awesome goodies.\u003C/p\u003E\r\n\r\n\u003Ch3\u003EWork\u003C/h3\u003E\r\n\r\n\u003Cp\u003EI'm still working for \u003Ca href=\"http://whygosolo.com\" title=\"WGS Homepage\"\u003EWhyGoSolo\u003C/a\u003E and it's still as awesome as ever. It's quietened down a little lately (with most of us being busy with other things) but we've just pushed out the latest release of the site - Boone.\u003C/p\u003E\r\n\r\n\u003Cp\u003EAnd thats about all.\u003C/p\u003E", "state": "published", "created_at": "2008/03/08 15:29:06 +0000"}, {"slug": "5-misc-rails-tips", "updated_at": "2008/04/21 20:05:03 +0000", "title": "5 Misc. Rails Tips", "posting_type": "post", "id": 23, "category_id": 2, "published_at": "2008/04/21 20:05:03 +0000", "contents": "\u003Cp\u003EJust a quick note before I start - This has been written\r\nmainly as an entry to the \u003Ca href=\"http://railscasts.com/contest\" title=\"Railscast's Contest\"\u003ERailscast's contest\u003C/a\u003E for epic loot. With that said, I'm hoping they're some generally helpful tips.\u003C/p\u003E\r\n\r\n\u003Ch3\u003ETip #1 - Join the community\u003C/h3\u003E\r\n\r\n\u003Cp\u003EThe most important part of Rails is the community - the fantastic little groups thats pop up focused on individual niches. You've probably seen WorkingWithRails and the like but my suggestion is that as a Rails / Ruby-based developer, it's usually in your best interested to partake in the community. And even more so, not just the communities for your specific niche - read up about alternatives (e.g. Merb), hang out in irc rooms and most of all participate. For Rubyists, I recommend the following:\u003C/p\u003E\r\n\r\n\u003Cul\u003E\r\n\t\u003Cli\u003E\u003Cstrong\u003EUser Groups:\u003C/strong\u003E Join your local user groups; In Perth we have AWIA / Port80 (which is Web Developers in General) and \u003Ca href=\"http://www.rubyonrails.com.au\" title=\"RORO\"\u003ERORO\u003C/a\u003E - both of which are an invaluable source of knowledge and a great bunch of people. Also, most will put on talks or events of some kind (RORO over east has Railscamps which are damned awesome looking) and so you'll also get plenty of opportunities to network and to learn more.\u003C/li\u003E\r\n\t\r\n\t\u003Cli\u003E\u003Cstrong\u003EForums / Mailing Lists:\u003C/strong\u003E I'm not into forums as much as I used to but both Forms (e.g. \u003Ca href=\"http://www.railsforum.com\" title=\"RailsForum\"\u003ERailsForum\u003C/a\u003E) and Mailing Lists (e.g. the official Ruby On Rails one etc) are a fantastic place to both read news and to keep up to date. An even better way of building your knowledge is to be on the bleeding edge and Mailing Lists in particular (along with IRC) are the perfect places to find out what people are making.\u003C/li\u003E\r\n\t\r\n\t\u003Cli\u003E\u003Cstrong\u003EIRC:\u003C/strong\u003E I can't stress this enough - Hanging out on IRC is a great way to meet people in your community, to find out what is happening and to just learn. Freenode seems to be the hip place these days and I suggest checking out #rubyonrails, #merb, #datamapper, #roro (if you're Australian) and #offrails - The last one is less formal than the others but is in general a small community of usually-rails-based developers.\u003C/li\u003E\r\n\t\r\n\t\u003Cli\u003E\u003Cstrong\u003ETwitter:\u003C/strong\u003E Lastly, Twitter is the new irc. My only suggestion here is to sign up if you haven't a follow a few different Ruby / Rails developers. There is a lot of noise but there is also a lot of new stuff.\u003C/li\u003E\r\n\u003C/ul\u003E\r\n\r\n\u003Ch3\u003ETip #2 - Have a testing server\u003C/h3\u003E\r\n\r\n\u003Cp\u003EWhen I say testing server, I don't mean one dedicated to running unit tests; I mean one for you to test out little ideas - even if there is a possibility they could bork your environment. VM's are ideal for this and VirtualBox is both free, easy and available on most major platforms. It can be as simple as downloading VirtualBox, an Ubuntu ISO and then setting it up like a real environment - all safely nestled away on your development box if you'd like.\u003C/p\u003E\r\n\r\n\u003Cp\u003EIf you want to go a bit further and you have a spare box sitting around, setup Vmware Server or Xen and a few different vm's with different environments - In particular, a Continuous Integration box may come in handy and I've always like the idea of having my own gem server which builds gems for the edge versions of Merb, Rails and the Like so my system is always up to date. It shouldn't take more than a day or two to setup and if you don't have much server experience, it's the perfect excuse to learn.\u003C/p\u003E\r\n\r\n\u003Ch3\u003ETip #3 - Check out new technology\u003C/h3\u003E\r\n\r\n\u003Cp\u003ETry and stay on the cutting edge of things - e.g. become one of the early adopters of a technology (e.g. Merb / Git are examples of that a while ago - they're pretty much mainstream now). The technology / project you choose may not become mainstream but you'll learn a hell of a lot you likely wouldn't of before - I learnt a lot about ruby by reading through the source of early versions of Merb.\u003C/p\u003E\r\n\r\n\u003Cp\u003EAlso, contributing back to new technologies is usually a good way of getting to know people (see above) and it's also another way of getting respect among other developers.\u003C/p\u003E\r\n\r\n\u003Ch3\u003ETip #4 - Have a pet application\u003C/h3\u003E\r\n\r\n\u003Cp\u003EEven if you're only doing Rails for work, I suggest having a little pet application at home to experiment with stuff. It may not be used by others but it's an excellent way of trying out new things, building your skills and honestly, who knows - you could have the next github on your hands.\u003C/p\u003E\r\n\r\n\u003Cp\u003EMore seriously, by building a pet application you get to not only focus on something at your own pace but it also lets you put into practice things that may only be applicable in certain circumstances in the real world as well as having the freedom to test out plugins etc as you see fit.\u003C/p\u003E\r\n\r\n\u003Ch3\u003ETip #4 / #5 - Do RailsRumble\u003C/h3\u003E\r\n\r\n\u003Cp\u003EThis one is more specific than the others but it's for a reason - I highly suggest taking part in the next RailsRumble when the times comes around. It's not only a bloody good time but if you get a team together it's an excellent environment in which to show off your development skills.\u003C/p\u003E\r\n\r\n\u003Cp\u003EThe main reason I'm suggesting this is because it ties together everything I've already suggested - It lets you work in a real world situation (e.g. time based), it lets your form invaluable connections (I only now frequent #offrails because of RailsRumble) and there's even some nice motivation for taking part.\u003C/p\u003E\r\n\r\n\u003Cbr /\u003E\r\n\u003Cp\u003EWell, there you have it - My main 5 tips for Rails developers; All of them intended more at being a better developer than developing better (if that makes sense)\u003C/p\u003E", "state": "published", "created_at": "2008/04/21 19:33:46 +0000"}, {"slug": "enki-menki-or-eoraptor", "updated_at": "2008/04/25 01:07:05 +0000", "title": "Enki, Menki or Eoraptor?", "posting_type": "post", "id": 24, "category_id": 2, "published_at": "2008/04/25 01:05:48 +0000", "contents": " \u003Cp\u003EA while back whilst browsing the \u003Ca href=\"http://groups.google.com/group/rails-oceania\" title=\"Ruby on Rails Oceania\"\u003ERORO Google Group\u003C/a\u003E, I noticed Xavier Shay's little project \"Enki\" - an interesting little blog engine written on Ruby on Rails.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Cp\u003ENow, the thing that really interested me though was that Enki's philosophy was practically the same as that for Eoraptor - \u003C/p\u003E\r\n\r\n\u003Cblockquote\u003E\r\nAny real coder knows the easiest and best way to customize something is by hacking code. Because you want your blog to be you, not bog standard install #4958 with 20 posts per page instead of 15.\u003C/blockquote\u003E\r\n\r\n\u003Cp\u003EYou see, When I first started work on Eoraptor, I had a hell of a lot more time than I do now (which admittedly is still a lot). In some sort of attempt to prove how awesome Rails is I'd decided that I was sick of Mephisti / Simplelog / Wordpress (after trying all of them at one point or another) and so instead set off to write my own simple engine with the notion of simplicity kicking the ass of everything else.\u003C/p\u003E\r\n\r\n\u003Cp\u003ENow, the issue with all of this is that over time I've slowly lost interest in certain parts of Eoraptor (e.g. I only noticed the other day file uploads are broken and have been for a long time) and I never did get to finish implementing the projects section listed up the top.\u003C/p\u003E\r\n\r\n\u003Cp\u003EThe thing that's really drilled this home was seeing Xavier's recent work on undo stuff etc in the dashboard branch of Enki - the whole Admin really seemed impressive - It may not have directly agreed with Eoraptor's philosophy of integrating the admin UI into the Blog UI but it certain wasn't bad enough to annoy me (like say, wordpress).\u003C/p\u003E\r\n\r\n\u003Cp\u003EWith that in mind, I now ask the question - where does the future for Eoraptor lie? I have three options as I see it:\u003C/p\u003E\r\n\r\n\u003Col\u003E\r\n  \u003Cli\u003E Switch to Enki - it's got a clean code base, it's got some kick ass features and it's shares the Eoraptor philosophy.\u003C/li\u003E\r\n  \u003Cli\u003ESwitch to Menki - It's like Enki but in Merb and missing some of the newer work on the stuff Enki has apparently.\u003C/li\u003E\r\n \u003Cli\u003EOr lastly, clean up Eoraptor to something releasable and do so - there are still a bunch of things that need to be fixed but I think it wouldn't be too hard to do over the course of a few weekends.\u003C/li\u003E\r\n\u003C/ol\u003E\r\n\r\n\u003Cp\u003EWith all of that said, I guess this is really more a situation of me just wanting to get it written down so I'll hopefully do something about it - unlike so many other projects I've abandoned before.\u003C/p\u003E\r\n\r\n\u003Cp\u003E\u003Cstrong\u003EEdit:\u003C/strong\u003E I guess I forgot to mention the clear case where Eoraptor wins out - it's got a freaking dinosaur for a mascot.\u003C/p\u003E", "state": "published", "created_at": "2008/04/25 01:02:36 +0000"}, {"slug": "a-little-taste", "updated_at": "2008/06/30 16:44:53 +0000", "title": "A little taste...", "posting_type": "post", "id": 25, "category_id": 2, "published_at": "2008/05/14 11:39:38 +0000", "contents": "\u003Cp\u003EOf what's to come...\u003C/p\u003E\r\n\r\n\u003Cp\u003EFirst up, there's Ponder - essentially a rebuilt version\r\nof my RailsRumble project for my Uni web-tech (CITS1231) project. The page you\r\nsee below is a part of the standard user profile (in this case,\r\nthe currently logged in users profile).\u003C/p\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Ponder_\u2014_darcy_l_s_profile\" src=\"/uploads/datas/102/original/Ponder_\u2014_Darcy_L_s_Profile.jpg?1214844018\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003ENext up, is a Java (CITS1200) project I'm working on in a group;\r\nOne of the parts is to write a class to Graph Polynomials\r\nand well, this is it. Note: If you have suggestions on improving\r\nthe smoothness of the graph itself (e.g. some sort of interpolation\r\nor something along those lines - It comes in because we're converting double's\r\nfor the x / y value to pixel coordinates so it's not exact), Feel free to post them.\u003C/p\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"20080514-jt16gm44ubjri641br2wuinfig\" src=\"/uploads/datas/103/original/20080514-jt16gm44ubjri641br2wuinfig.jpg?1214844019\" /\u003E\u003C/div\u003E\r\n", "state": "published", "created_at": "2008/05/14 11:35:40 +0000"}, {"slug": "general-update", "updated_at": "2008/06/30 16:44:26 +0000", "title": "General Update", "posting_type": "post", "id": 26, "category_id": 1, "published_at": "2008/05/19 04:48:40 +0000", "contents": "\u003Cp\u003EYet another of my general \"oh this is whats going on\" updates. First up, we've got my latest work for WhyGoSolo - we finally added search, even if it's in the very basics still. See the small screenshot below or log in and check it out in the uppermost nav, near where the link to your own profile is.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Whygosolo_-_search_results\" src=\"/uploads/datas/104/original/WhyGoSolo_-_Search_Results.jpg?1214844019\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003EOn to Eoraptor - I've been saying it for months now, but I'm closer to open sourcing it - I've just gone through, cleaned up a bunch of stuff and even removed Codepress. I tested the Amy editor as a replacement and it worked better - still not sure if it's the optimal alternative though. I'm testing it with mod_rails at the moment and it seems to be working well.\u003C/p\u003E\r\n\r\n\u003Cp\u003EThat is all.\u003C/p\u003E", "state": "published", "created_at": "2008/05/19 04:45:04 +0000"}, {"slug": "now-featuring-projects", "updated_at": "2008/05/19 07:56:08 +0000", "title": "Now featuring projects", "posting_type": "post", "id": 27, "category_id": 2, "published_at": "2008/05/19 07:56:08 +0000", "contents": "\u003Cp\u003EJust a quick eoraptor / this blog pimping tonight. One of the features I've been planning to implement for a long time - projects - has now been implemented. It's basically a really easy way to have a structured project page with integrated logos etc. Nothing big but nice to have none the less. Plus, it puts me one step closer to open sourcing the site.\u003C/p\u003E", "state": "published", "created_at": "2008/05/19 07:53:22 +0000"}, {"slug": "the-road-to-ponder", "updated_at": "2008/06/30 17:06:37 +0000", "title": "The Road to Ponder", "posting_type": "post", "id": 28, "category_id": 5, "published_at": "2008/06/01 04:52:56 +0000", "contents": "\u003Cp\u003EFor the last month or two, I've been building a new site called \"Ponder\" for a University project. The site itself is simple\r\na ground up redevelopment of the site I built for RailsRumble - \"Insight\" - but with the added twist it's been built on jQuery\r\nand a bunch of other technologies (You can see a list of all the resources I used etc on the site itself which I will post once\r\nmarking has been completed).\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Cp\u003EWith the intention of showing the process of developing it from beginning to end, I now present you with a few pictures of the site throughout the development process.\u003C/p\u003E\r\n\r\n\u003Ch3\u003ESimple Beginnings\u003C/h3\u003E\r\n\r\n\u003Cp\u003ELike most developments, it started out with a simple problem - What to built the site on? I liked the idea of Merb and StrokeDB but in the end time constraints meant I ended up using Ruby, Rails \u0026amp; MySql to build it. The first stage was to draw out a few plans for it and to even mock up a few ideas - below is the first design I thought of and played around with (book image from \u003Ca href=\"http://sxc.hu/\"\u003ESXC.hu\u003C/a\u003E).\u003C/p\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Ponder_design\" src=\"/uploads/datas/105/original/Ponder_Design.jpg?1214844019\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003EEventually I settled on the idea of a nice desk style design - with a \"shined-wood\" type header with a piece of page for where the logo etc. fits. So from there, I whipped up a \r\ndraft design in photoshop and built a rough prototype page in Rails - followed by some basic models etc to get a feel for it (see below)\u003C/p\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Ponder_\u2014_editing_university_of_western_australia\" src=\"/uploads/datas/106/original/Ponder_\u2014_Editing_University_of_Western_Australia.jpg?1214844019\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003ESince Login pages are a tad different from actual content pages, I then went on to making a layout / general style for smaller pages e.g. Logging in - ending up with the following.\u003C/p\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Ponder_\u2014_login_to_ponder\" src=\"/uploads/datas/108/original/Ponder_\u2014_Login_to_Ponder.jpg?1214844020\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003EThen after further styling, esp. forms - I ended up with the following.\u003C/p\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Skitch-1\" src=\"/uploads/datas/107/original/Skitch-1.jpg?1214844020\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003EFollowing on from that, I developed it a bunch more - both application and design wise. After a week or two of doing it in my spare time, I got to the first design milestone...\u003C/p\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Ponder_\u2014_welcome\" src=\"/uploads/datas/112/original/Ponder_\u2014_Welcome.jpg?1214844174\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Ponder_\u2014_sign_up\" src=\"/uploads/datas/111/original/Ponder_\u2014_Sign_Up.jpg?1214844174\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Ponder_\u2014_units_at_university_of_western_australia\" src=\"/uploads/datas/113/original/Ponder_\u2014_Units_at_University_of_Western_Australia.jpg?1214844174\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003EAfter a few more weeks of tweaking and testing, I then started to work on the main feature - study sessions. Essentially, little ajax chat rooms designed for holding a study meeting. Below is a glimpse of the design. The best part is that it was relatively simple with jQuery and Rails - Only two hundred or so lines of code (excluding templates).\u003C/p\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Ponder_\u2014_in_study_session__first_study_session_\" src=\"/uploads/datas/114/original/Ponder_\u2014_In_Study_Session__First_Study_Session_.jpg?1214844174\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003ENow we arrive at the end game - There's roughly a week left as of posting this and I've done most of the application. With the aim of showing what the site is and some of the features I've built in, I'll likely make a screencast on Ponder and will post it here sometime soon. I hope you like what you see - I plan to post more on Ponder sometime soon.\u003C/p\u003E", "state": "published", "created_at": "2008/06/01 01:32:14 +0000"}, {"slug": "and-im-back", "updated_at": "2008/06/30 17:21:15 +0000", "title": "And I'm Back...", "posting_type": "post", "id": 29, "category_id": 1, "published_at": "2008/06/30 17:21:15 +0000", "contents": "\u003Cp\u003EI've been quite lazy with the whole blogging thing recently - mainly because University has kept me bloody busy but also because most of the stuff I was working on was either assignment / exam related (which is over now) or because it's been under wraps. First off, you can expect some more posts in the coming weeks - there's a lot of exciting stuff going on and I've finally fixed a bug in Eoraptor that had been there for a few weeks that prevented me from posting posts.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Cp\u003EThe big thing is a \u003Ca href=\"http://whygosolo.com/\" title=\"WhyGoSolo\"\u003EWhyGoSolo\u003C/a\u003E related set of work. On one hand, we recently lost our CTO, the awesome \u003Ca href=\"http://caseysoftware.com/blog\" title=\"Keith's blog\"\u003EKeith Casey\u003C/a\u003E \u003Cstrong\u003Ebut\u003C/strong\u003E on the other It made us re-evaluate were we were heading and really got me to kick my ass into action.\u003C/p\u003E\r\n\r\n\u003Cp\u003ESo, for the last few weeks, I've been coding away (note to self: taking on a programming project in the middle of exams isn't a good idea) to build an awesome new \u003Cabbr title=\"WhyGoSolo\"\u003EWGS\u003C/abbr\u003E related project - \u003Ca href=\"http://gofortix.com/\"\u003ETicket's with a Twist\u003C/a\u003E (ignore the different domain - there's a reason behind the choice). Although there is only a place-holder page up at the moment, We're looking to launch the site in the \u003Cstrong\u003Every\u003C/strong\u003E near future, and we're getting damned close to it as well. For example, this is my todo list for launch:\u003C/p\u003E\r\n\r\n\u003Cdiv class=\"image_holder\"\u003E\u003Cimg alt=\"Launch-list\" src=\"/uploads/datas/119/original/launch-list.jpg?1214846365\" /\u003E\u003C/div\u003E\r\n\r\n\u003Cp\u003EOnce all of that's done, we're going to go over it all with a relatively fine-toothed comb and then we'll launch - In other words, free tickets for all! (well, those who win them atleast). In the mean time, Check back here for updates and if you're interested in Ticket's with a Twist, check out \u003Ca href=\"http://twitter.com/TicketTwist\"\u003Eour twitter\u003C/a\u003E. Thanks!\u003C/p\u003E", "state": "published", "created_at": "2008/06/30 17:17:39 +0000"}, {"slug": "mapstraction-and-geokit", "updated_at": "2008/07/23 16:46:31 +0000", "title": "Mapstraction and Geokit", "posting_type": "post", "id": 30, "category_id": 2, "published_at": "2008/07/23 16:46:31 +0000", "contents": "\u003Cp\u003EWelcome to the first in what is hopefully the first in a series of posts introducing some of the stuff we use behind the scenes for Ticket\u0026#8217;s with a Twist. Today we\u0026#8217;re going to talk about two open source libraries: One for Ruby and one for Javascript (including my own little wrapper around it).\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Ch3\u003EGeoKit\u003C/h3\u003E\r\n\u003Cp\u003EFirst up is GeoKit \u0026#8211; a Ruby library that makes it really simple to deal with multiple geocoders (in essence, web services that let us convert a location in the form of an address to co-ordinates). Written by Andre Lewis and Bill Eisenhauer, it gives us a unified way to access the Google Maps, Yahoo Maps, Geocoder.us and Geocoder.ca geocoders as well as a \u0026#8220;Multigeocoder\u0026#8221; \u0026#8211; kind of like a unified version of all of the above with fallback and the like.\u003C/p\u003E\r\n\u003Cp\u003ETo start off, we\u0026#8217;re going to pretty much follow the standard process for installing GeoKit.\u003Cbr /\u003E\r\nIn the root directory of your Rails plugin, you can use script/plugin to install it.\u003C/p\u003E\r\n\u003Ccode\u003Eruby script/plugin install svn://rubyforge.org/var/svn/geokit/trunk\u003C/code\u003E\r\n\u003Cp\u003EThis will install a copy of all of the related files \u0026#8211; The Ruby Geocoder interfaces and the like. Next, you\u0026#8217;ll need to edit your initializers or add a new one \u0026#8211; By default Geokit will append the configuration to the end of your config/environment.rb file. Since Google Map keys and the like are on a per-domain basis, you\u0026#8217;ll likely want to set it in an initializer so that it loads it from a \u003Cspan class=\"caps\"\u003EYAML\u003C/span\u003E file. For the moment, I\u0026#8217;ll leave this as an exercise for the reader and in a few days I\u0026#8217;ll post the code I\u0026#8217;m using.\u003C/p\u003E\r\n\u003Cp\u003EOnce that\u0026#8217;s done, you\u0026#8217;ll need to set it up on each of your models / where you want to use it \u0026#8211; the full usage information can be found on the \u003Ca href=\"http://geokit.rubyforge.org/readme.html\"\u003Eofficial GeoKit site\u003C/a\u003E. In this example, we\u0026#8217;ll assume my model \u0026#8220;Person\u0026#8221; has three columns \u0026#8211; address, lat and lng.\u003C/p\u003E\r\n\u003Ccode\u003Eclass Person \u0026lt; ActiveRecord::Base\r\n  # All of my other model stuff would usually be here\r\n  acts_as_mappable :auto_geocode =\u0026gt; {:field =\u0026gt; :address,\r\n                                     :error_message =\u0026gt; 'Could not geocode address'}\r\nend\u003C/code\u003E\r\n\u003Cp\u003EThis will then set it up so that before the record is saved, GeoKit will use our multi-geocder to set the lat and lng attributes for the Person model, making it possible to then do distance based finds. So, I could then do the following:\u003C/p\u003E\r\n\u003Ccode\u003EPerson.create :address =\u0026gt; \"1 Infinite Loop, California\"\u003C/code\u003E\r\n\u003Cp\u003Eand GeoKit would get the correct lat / lng, storing it with the record in the database.\u003Cbr /\u003E\r\nOnce we\u0026#8217;ve done this, we can then do all sorts of stuff such as finding locations with a certain distance:\u003C/p\u003E\r\n\u003Ccode\u003EPerson.find :first, :origin =\u0026gt; \"1 Infinite Loop, California\", :within =\u0026gt; 5\u003C/code\u003E\r\n\u003Cp\u003EWould then find the first person within 5 miles of 1 Infinite Loop \u0026#8211; in this case, The person\u003Cbr /\u003E\r\nwe created before. Since it calculates the distance in sql, we can also use things such as\u003Cbr /\u003E\r\nordering by distance (e.g. :order =\u0026gt; \u0026#8220;distance \u003Cspan class=\"caps\"\u003EASC\u003C/span\u003E\u0026#8221; to return the closest first)\u003C/p\u003E\r\n\u003Cp\u003EThere is a lot more to it than this \u0026#8211; You can go further to integrate it with libraries such as Pat Allen\u0026#8217;s Thinking Sphinx (Sphinx having built in support for calculating geographical distances \u0026#8211; making it fairly easy to search based on distances like we did above) or you can use it in other non-rails-specific libraries.\u003C/p\u003E\r\n\u003Ch3\u003EMapstraction\u003C/h3\u003E\r\n\u003Cp\u003EMapstraction is an awesome Javascript library that abstracts out the actual mapping component of it all \u0026#8211; it gives us a unified interface between Google Maps, Yahoo Maps, Microsoft\u0026#8217;s Virtual Earth and a bunch of other different mapping API\u0026#8217;s.\u003C/p\u003E\r\n\u003Cp\u003ETo start, you need to include the javascript for the respective mapping like you would usually do \u0026#8211; e.g. with Google Maps you include the javascript with your \u003Cspan class=\"caps\"\u003EAPI\u003C/span\u003E Key. Then, you add one line to include the Mapstraction Library.\u003C/p\u003E\r\n\u003Cp\u003E\u003Ccode\u003E\u0026lt;script type=\"text/javascript\" src=\"http://mapstraction.com/svn/source/compressed/mapstraction.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003C/code\u003E\u003C/p\u003E\r\n\u003Cp\u003ENote that usually you would download a copy to the local javascripts/ directory under public.\u003C/p\u003E\r\n\u003Cp\u003EOnce this has been done, the mapstraction library will do most of the work needed to provide a unified interface. For example, if we wanted to add a map with a single point, our \u003Cspan class=\"caps\"\u003EHTML\u003C/span\u003E and Javascript would be:\u003C/p\u003E\r\n\u003Ccode\u003E\u0026lt;div id=\"my-map\" style=\"width: 400px; height: 300px\"\u0026gt;\u0026lt;/div\u0026gt;\r\n\u0026lt;script type=\"text/javascript\"\u0026gt;\r\n  var myMap = new Mapstraction('my-map', 'google');\r\n  myMap.addMarker(new Marker(new LatLonPoint(37.404,-122.008)));\r\n\u0026lt;/script\u0026gt;\u003C/code\u003E\r\n\u003Cp\u003EIf you wanted to instead use Virtual Earth, you then would switch the Google Maps includes with\u003C/p\u003E\r\n\u003Ccode\u003E\u0026lt;script src=\"http://dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6\"\u0026gt;\u0026lt;/script\u0026gt;\u003C/code\u003E\r\n\u003Cp\u003EFollowed by switching one line of your javascript to:\u003C/p\u003E\r\n\u003Ccode\u003Evar myMap = new Mapstraction('my-map', 'microsoft');\u003C/code\u003E\r\n\u003Cp\u003EAnd then it\u0026#8217;s done. It is just a trivial example but the point here is that Mapstraction will make it easy for you\u003Cbr /\u003E\r\nto write javascript to utilise maps with ease that will also work across multiple providers.\u003C/p\u003E\r\n\u003Ch3\u003EMy contribution: map_builder.rb\u003C/h3\u003E\r\n\u003Cp\u003EMap builder is a really really simple and lightweight wrapper around Mapstraction that we\u0026#8217;re using in Ticket\u0026#8217;s with a Twist\u003Cbr /\u003E\r\nto generate the javascript (albeit in a slightly modified form). You can get it from \u003Ca href=\"http://github.com/Sutto/map-builder/tree/master\"\u003Emy GitHub repository\u003C/a\u003E and it\u0026#8217;s released under an \u003Cspan class=\"caps\"\u003EMIT\u003C/span\u003E license.\u003C/p\u003E\r\n\u003Cp\u003ETo install it, visit the repo and get a copy of map_builder.rb \u0026#8211; if you want to use it in your rails application, you should place the file in the\u003Cbr /\u003E\r\nlib/ directory. Then, inside you\u0026#8217;re code, you can then do the follow:\u003C/p\u003E\r\n\u003Ccode\u003Emap = MapBuilder.new('div-id') # Also, you can specify the provider, Default is google\r\nmap.add_point 1.0, 1.0\r\nmap.add_point an_object # must respond to .lat and .lng\r\nmap.add_point 1.0, 1.0, :message =\u0026gt; \"Some HTML to set as the info message\"\r\nmap.auto_fit # Will take all points and auto zoom / centre\r\nmap.set_zoom_and_center 5, 5.0, 5.0 # or, use an_object as before\u003C/code\u003E\r\n\u003Cp\u003EFinally, to get the generated javascript for your map, you can simply use:\u003C/p\u003E\r\n\u003Ccode\u003Emap.to_js\u003C/code\u003E\r\n\u003Cp\u003EThe beauty lies in the simplicity \u0026#8211; you can pass in coordinates as either lat, lng pairs or\u003Cbr /\u003E\r\nas an object that responds to .lat and .lng \u0026#8211; making it really easy to use with Geokit or\u003Cbr /\u003E\r\non it\u0026#8217;s own.\u003C/p\u003E\r\n\u003Ch3\u003EConclusion\u003C/h3\u003E\r\n\u003Cp\u003EIn combination, I\u0026#8217;ve found Mapstraction + Geokit to be a great way to easily work with maps \u0026amp; geocoders, letting\u003Cbr /\u003E\r\nus easily add geographically-specific stuff to your rails application. I am using it on our soon to be\u003Cbr /\u003E\r\nreleased site and even though it\u0026#8217;s a cobbled together set of components, it\u0026#8217;s easy for us to then go and switch\u003Cbr /\u003E\r\nbetween any one of the providers if we have the need to in the future.\u003C/p\u003E", "state": "published", "created_at": "2008/07/23 16:14:53 +0000"}, {"slug": "another-what-ive-been-working-on-post", "updated_at": "2008/08/29 04:54:36 +0000", "title": "Another \"What I've been working on\" post", "posting_type": "post", "id": 32, "category_id": 2, "published_at": "2008/08/29 04:54:36 +0000", "contents": "\u003Cp\u003EShort and sweet today - just a quick glance at \u003Ca href=\"http://gofortix.com/\"\u003ETickets with a Twist\u003C/a\u003E; A new site I've been building (n.b. I didn't design it) for \u003Ca href=\"http://yutmedia.com/\"\u003EYut Media\u003C/a\u003E. Enjoy!\u003C/p\u003E\r\n\r\n\u003Cdiv style=\"text-align: center; margin: 0 auto\"\u003E\u003Cobject width=\"425\" height=\"344\"\u003E\u003Cparam name=\"movie\" value=\"http://www.youtube.com/v/DURbvgDMpIc\u0026hl=en\u0026fs=1\u0026rel=0\u0026color1=0x3a3a3a\u0026color2=0x999999\"\u003E\u003C/param\u003E\u003Cparam name=\"allowFullScreen\" value=\"true\"\u003E\u003C/param\u003E\u003Cembed src=\"http://www.youtube.com/v/DURbvgDMpIc\u0026hl=en\u0026fs=1\u0026rel=0\u0026color1=0x3a3a3a\u0026color2=0x999999\" type=\"application/x-shockwave-flash\" allowfullscreen=\"true\" width=\"425\" height=\"344\"\u003E\u003C/embed\u003E\u003C/object\u003E\u003C/div\u003E\r\n", "state": "published", "created_at": "2008/08/29 04:53:43 +0000"}, {"slug": "the-acm-programming-competition", "updated_at": "2008/09/13 17:11:30 +0000", "title": "The ACM Programming Competition", "posting_type": "post", "id": 33, "category_id": 2, "published_at": "2008/09/13 17:11:30 +0000", "contents": "\u003Cp\u003E\r\n  If you're one of the people I talk to regularily / hang around online\r\n  in the same sorts of places then no doubt you've heard me talking about\r\n  the ACM Collegiate Programming competition. If not, the basic gist of it\r\n  is simple - Teams of 3 compete in a period of 5 hours to solve a set\r\n  of programming challenges - most heavily algorithms based. You're given\r\n  one computer to use between the three of you, your choice of 3-4 languages\r\n  (Java, C, C++ and Delphi - I say 3-4 because Delphi / Pascal is conditional\r\n  on where you take part) and you then compete. It starts out in regional\r\n  contests and then proceeds to an international level with teams from\r\n  each country.\r\n\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Cp\u003E\r\n  To get straight to the point, Two friends \u0026amp; I competed in the Australia\r\n  / New Zealand regionals so I thought I'd blog about what was involved,\r\n  how we went and how it's fired up the programming competition itch\r\n  inside of me. You see, of 9 teams in our state (Western Australia),\r\n  Our team - \"James Hales' Incredible Taskforce\" - being me,\r\n  \u003Ca href=\"http://jameshales.com/\"\u003EJames Hales\u003C/a\u003E and\r\n  \u003Ca href=\"http://prothoss.wordpress.com/\"\u003EConrad Pogson\u003C/a\u003E -\r\n  took out 2nd place. For a team that had never competed\r\n  in the ACM competition before and to be honest had very\r\n  little actual experience with implementing algorithms,\r\n  We did way better than we (and I think many of the other teams)\r\n  thought we would.\r\n\u003C/p\u003E\r\n\r\n\u003Cp\u003E\r\n  The most interesting aspects of competing haven't necessarily been\r\n  our actual score / rank - but rather, the side of effects of\r\n  preparing to compete. For one, I've spent some time learning\r\n  the basics of vim - and loving it - (with big thanks to James).\r\n  It's given me a chance to also learn a little bit more about\r\n  algorithms in general - something that up until now I'd had\r\n  almost zero exposure to.\r\n\u003C/p\u003E\r\n\r\n\u003Cp\u003E\r\n  In the same regard, it's made me realise just how much fun it is to\r\n  compete in situations like this - something I've gotten a chance\r\n  to help organise this year thanks to \u003Ca href=\"http://railsrumble.com\"\u003ERailsRumble\u003C/a\u003E.\r\n  And yes, we'll be opening registrations real soon - delays such\r\n  as the ACM Programming Comp. have meant that I've been able\r\n  to spend less time on it than I would of liked to. The next\r\n  day or two is going to be exclusively dedicated to getting the\r\n  app to a stage where we can open registration early next week.\r\n\u003C/p\u003E\r\n\r\n\u003Cp\u003E\r\n  The last thing I wanted to note was some of the resources\r\n  that I'd found helpful - in particular, the\r\n  \u003Ca href=\"http://www.tug.org/texshowcase/cheat.pdf\"\u003ETheoretical Computer Science Cheat Sheet\u003C/a\u003E\r\n  and\r\n  \u003Ca href=\"http://online-judge.uva.es/problemset/Art_of_Programming_Contest_SE_for_uva.pdf\"\u003EArt of Programming Contest\u003C/a\u003E\r\n  - a really awesome little ebook that covers a bunch of stuff you\r\n  know for the ACM Comp. I'd also just quickly like to thanks\r\n  all of the people involved (they'll be posted on UWA CSSE Site\r\n  sometime in the near future) - Luigi Barone in particular who\r\n  organised a lot of the stuff for us.\r\n\u003C/p\u003E\r\n\r\n", "state": "published", "created_at": "2008/09/13 17:11:02 +0000"}, {"slug": "introducing-marvin", "updated_at": "2008/09/14 19:20:52 +0000", "title": "Introducing Marvin", "posting_type": "post", "id": 34, "category_id": 2, "published_at": "2008/09/14 19:20:52 +0000", "contents": "\u003Cp\u003E\r\n  Like all good spare time projects, my most recent - Marvin - was created\r\n  to scratch a particular itch. I'm usually a fairly regular visitor\r\n  in a particular ruby oriented chat room. One of the things that we'd talked\r\n  about adding as a group was an IRC bot - in particular, something which\r\n  would let us keep logs (with a searchable web UI) as well as a few\r\n  other niceties (e.g. a Twitter bot). With that in mind, I spent some\r\n  time hacking on it. To be brutally honest I wasn't a bit fan of all of\r\n  the \r\n\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Ch3\u003EFrom simple beginnings...\u003C/h3\u003E\r\n\r\n\u003Cp\u003E\r\n  The first thing I did was to evaluate all of the current options. In the ruby\r\n  world, there seems to be two sets of IRC tools - bots / bot frameworks (e.g\r\n  Autumn, MatzBot, Etc.) and IRC libraries (E.g. Net/IRC, Net::YAIL, IRCSocket etc.).\r\n  I spent a bit of time playing with each and see what I could achieve with an\r\n  hour or two of hacking. In the end, the decision was made to use a neat little\r\n  library developed for #fauna on freenode - \u003Ca href=\"http://github.com/defunkt/matzbot\"\u003EMatzBot\u003C/a\u003E.\r\n  It was simple enough to get started, relatively lightweight and most importantly\r\n  getting started was as simple as adding a module and methods.\r\n\u003C/p\u003E\r\n\r\n\u003Cp\u003E\r\n  After a while \u0026amp; some community hacking (there was at one point 4-5 of us\r\n  I believe hacking away at Offbot - as it was christened). We'd gotten to \r\n  a point where we'd added a timer-based setup for things like Twitter, a bunch\r\n  of changes to the underlying infrastructure (e.g. config files, proper logging\r\n  among other things) and then finally I got to a point were I realised hacking\r\n  layer upon layer on top of MatzBot wasn't really adding anything. It was\r\n  only when we ran into a few minor issues related to the origin of the bot\r\n  and direction we were taking it in. So, I got on the net and started looking\r\n  at the RFC's related to the IRC protocol's and started hacking away.\r\n\u003C/p\u003E\r\n\r\n\u003Ch3\u003EOne Day Later\u003C/h3\u003E\r\n\r\n\u003Cp\u003E\r\n  Right from the start, I knew I wanted to make something relatively simple\r\n  but which I could build bigger systems. I didn't exactly want a highly\r\n  specialised IRC Bot framework like Autumn nor did I want an overly\r\n  simple IRC library. I wanted the freedom to build what I wanted on\r\n  top of IRC but I also wanted it to offer a bunch of build in stuff I could\r\n  choose to use. More importantly, I wanted the code to be clean and\r\n  with a clear intention.\r\n\u003C/p\u003E\r\n\r\n\u003Cp\u003E\r\n  I settled on a simple event based design - you could build your own\r\n  handlers and then layer them all together to build something suited\r\n  exactly to your needs. I wanted to use EventMachine from the get go\r\n  and after a few hours of hacking stuff together I had a working\r\n  prototype. I say a few hours but Infact I started hacking at 10pm on\r\n  a friday night and before I knew it was 8:30am on the following\r\n  saturday morning.\r\n\u003C/p\u003E\r\n\r\n\u003Ch3\u003EThe Small Things\u003C/h3\u003E\r\n\r\n\u003Cp\u003E\r\n  Over the next few weeks I slowly integrated the changes. I rewrote the\r\n  IRC client component from bottom up, worked on adding a bunch of common\r\n  tools (e.g. a Marvin::Base class for common functionality in \"handlers\")\r\n  and slowly worked on introducting small refinements. As it currently\r\n  stands today, I've got a bunch of starting points written - A base class\r\n  for common functionality, Proper logging + configuration, a Command\r\n  Handler class that makes writing MatzBot-like bots really easy, A\r\n  JSON-based DataStore that loads and dumps data when the bot is started /\r\n  stopped respectively and other things along those lines. The design\r\n  is obviously modeled on something similar to Rack and so writing things\r\n  such as Middleware is easy as pie (although, I've yet to implement the\r\n  parts that process outgoing information).\r\n\u003Cp\u003E\r\n\r\n\u003Cp\u003E\r\n  With that said, there is still a bunch of small things I'm working on as\r\n  I progress towards an initial release - I'm building a set of tools to\r\n  including a simple DRBHandler (e.g. you setup your DRB server info and it\r\n  will then forward the events from the IRC client on to it). I'm also working\r\n  towards an improved way of handling exceptions similar to exception notifier\r\n  / hoptoad etc. on the rails in the hope of making it easier for developers\r\n  to debug live bots.\r\n\u003C/p\u003E\r\n\r\n\u003Ch3\u003EWhen \u0026amp; Where\u003C/h3\u003E\r\n\r\n\u003Cp\u003E\r\n  With all of this in mind, I've opted to go the open development route - \r\n  you can check out my current progress \u003Ca href=\"http://github.com/sutto/marvin\"\u003Eon GitHub\u003C/a\u003E.\r\n  I'm hoping to get a semi-complete \"0.1\" release out sometime soon (and maybe a Rails-like\r\n  way of generating new apps. versus actually just cloning the source at the moment\r\n  and building from there. I'd love to hear what people think.\r\n\u003C/p\u003E\r\n\r\n", "state": "published", "created_at": "2008/09/14 19:20:43 +0000"}, {"slug": "the-laughing-bird", "updated_at": "2008/11/07 18:10:32 +0000", "title": "The Laughing Bird", "posting_type": "post", "id": 35, "category_id": 2, "published_at": "2008/11/07 18:10:32 +0000", "contents": "\u003Cp\u003EJust a few days ago (on the 6th of Nov. to be exact) \u003Ca href=\"http://webjam.com.au/webjam9\"\u003EWebjam 9\u003C/a\u003E occured\r\nhere in Perth as a part of WA Web Week (and more specifically, after \u003Ca href=\"http://edgeofthweb.org.au\"\u003EEdge\r\nof the Web\u003C/a\u003E on the same day). Having missed out last time they came to town,\r\nI took this webjam as a chance to prototype an idea and show it off.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Cp\u003EI built Kookaburra - basically, a simple twitter-like service running on top\r\nof a customized IRC daemon (built as a fork of \u003Ca href=\"http://code.google.com/p/ruby-ircd/\"\u003Eruby-ircd\u003C/a\u003E) which lets users\r\nuse a twitter like experience (web UI, twitter apps, hashtags and @replies) as\r\na nice little way to interact with an irc server.\u003C/p\u003E\r\n\r\n\u003Cp\u003EIn other words, we let the geeks be geeks (i.e. use the old way, IRC) and those\r\nwho just want something normal to interact with it. First, my presentation:\u003C/p\u003E\r\n\r\n\u003Cdiv style=\"text-align: center\"\u003E\r\n\u003Cobject style=\"margin:0px\" width=\"425\" height=\"355\"\u003E\u003Cparam name=\"movie\" value=\"http://static.slideshare.net/swf/ssplayer2.swf?doc=whenircmettwitter-1226079747229204-9\u0026rel=0\u0026stripped_title=when-irc-met-twitter-presentation\" /\u003E\u003Cparam name=\"allowFullScreen\" value=\"true\"/\u003E\u003Cparam name=\"allowScriptAccess\" value=\"always\"/\u003E\u003Cembed src=\"http://static.slideshare.net/swf/ssplayer2.swf?doc=whenircmettwitter-1226079747229204-9\u0026rel=0\u0026stripped_title=when-irc-met-twitter-presentation\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"425\" height=\"355\"\u003E\u003C/embed\u003E\u003C/object\u003E\r\n\u003C/div\u003E\r\n\r\n\u003Cp\u003EIn other words. IRC + Twitter + some Ruby magic == awesomeness. For example, my demo\r\nshould of been this (rushed in to about 2 minutes - giving one for my actual presentation)\r\nand mind all of the extra talking...\u003C/p\u003E\r\n\r\n\u003Cscript src=\"http://www.apple.com/library/quicktime/scripts/ac_quicktime.js\" language=\"JavaScript\" type=\"text/javascript\"\u003E\u003C/script\u003E\r\n\u003Cscript src=\"http://www.apple.com/library/quicktime/scripts/qtp_library.js\" language=\"JavaScript\" type=\"text/javascript\"\u003E\u003C/script\u003E\r\n\u003Clink href=\"http://www.apple.com/library/quicktime/stylesheets/qtp_library.css\" rel=\"StyleSheet\" type=\"text/css\" /\u003E\r\n\r\n\u003Cdiv style=\"text-align: center; margin: 0 auto\"\u003E\r\n\u003Cscript type=\"text/javascript\"\u003E\u003C!--\r\n\tQT_WritePoster_XHTML('Click to Play', 'http://blog.ninjahideout.com/uploads/datas/124/original/kookaburra-recap-poster.jpg',\r\n\t\t'http://dl-client.getdropbox.com/u/25089/kookaburra-recap.mov',\r\n\t\t'532', '416', '',\r\n\t\t'controller', 'true',\r\n\t\t'autoplay', 'true',\r\n\t\t'bgcolor', 'black',\r\n\t\t'scale', 'aspect');\r\n//--\u003E\r\n\u003C/script\u003E\r\n\u003Cnoscript\u003E\r\n\u003Cobject width=\"532\" height=\"416\" classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\" codebase=\"http://www.apple.com/qtactivex/qtplugin.cab\"\u003E\r\n\t\u003Cparam name=\"src\" value=\"http://blog.ninjahideout.com/uploads/datas/124/original/kookaburra-recap-poster.jpg\" /\u003E\r\n\t\u003Cparam name=\"href\" value=\"http://dl-client.getdropbox.com/u/25089/kookaburra-recap.mov\" /\u003E\r\n\t\u003Cparam name=\"target\" value=\"myself\" /\u003E\r\n\t\u003Cparam name=\"controller\" value=\"false\" /\u003E\r\n\t\u003Cparam name=\"autoplay\" value=\"false\" /\u003E\r\n\t\u003Cparam name=\"scale\" value=\"aspect\" /\u003E\r\n\t\u003Cembed width=\"532\" height=\"416\" type=\"video/quicktime\" pluginspage=\"http://www.apple.com/quicktime/download/\"\r\n\t\tsrc=\"kookaburra-recap-poster.jpg\"\r\n\t\thref=\"http://dl-client.getdropbox.com/u/25089/kookaburra-recap.mov\"\r\n\t\ttarget=\"myself\"\r\n\t\tcontroller=\"false\"\r\n\t\tautoplay=\"false\"\r\n\t\tscale=\"aspect\"\u003E\r\n\t\u003C/embed\u003E\r\n\u003C/object\u003E\r\n\u003C/noscript\u003E\r\n\u003C/div\u003E\r\n\r\n\u003Cp\u003ENeat, eh? So, on to the interesting stuff.\u003C/p\u003E\r\n\r\n\u003Ch3\u003EThe future\u003C/h3\u003E\r\n\r\n\u003Cp\u003EGiven I've now demoed it and let people in on what I'm building, I figure it's best\r\nto give a bit of insight in to when I actually plan on releasing it. For a start, the\r\nthe irc server is already up on github (I won't link to it, I'd like to avoid people\r\nforking it just yet) and I plan on open sourcing much of the rest of the app when\r\nI've had some time (over the two weeks) to solidify the idea.\u003C/p\u003E\r\n\r\n\u003Cp\u003EWith that said and done, I have much grander plans than this little demo (some of\r\nwhich won't be open source :(), some of which I hope to build upon in the next\r\nyear or so. With that said and done, there'll be stuff for people to play with\r\n\u003Cem\u003Every, very\u003C/em\u003E soon - I hope to make IRC a tiny bit cooler.\u003C/p\u003E \r\n\r\n\u003Ch3\u003EProblems\u003C/h3\u003E\r\n\r\n\u003Cp\u003EThe biggest problem with all of this is related to the fact to make it\r\nwork in a semi-twitter like fashion, I've had to bastardise the server a little\r\nbit (to the gods of the internet, I'm sorry). For example, messages appearing in\r\nchats from users who aren't recorded as members and stuff like that. The solution\r\nhere is to basically work on the server itself to better support this stuff\r\nand hopefully that'll also be done relatively soon.\u003C/p\u003E\r\n\r\n\u003Cp\u003EAs twitter found out, building microblogging apps is easy but making them scale isn't.\r\nThe biggest issue other than the aforementioned IRC-bastardisation is finding a way to efficiently\r\nstore past messages - at the moment, it's stored in memory on the server (which isn't ideal).\r\nI'll be working at this when I can and hopefully the solution will be relatively simple.\u003C/p\u003E \r\n\r\n\u003Ch3\u003EIn other words\u003C/h3\u003E\r\n\r\n\u003Cp\u003Eit's a neat demo, it works well enough to use and I plan on completely open sourcing it once\r\nI've built something a bit more solid. For the moment, enjoy what you've seen. If you want\r\nmore information, \u003Ca href=\"http://twitter.com/Sutto\"\u003Efollow me on twitter\u003C/a\u003E or subscribe to\r\nthis blog. I'll announce on both once I have a working demo and some more news on the other\r\ncool stuff I'm working on. Of course, none of this would of been as fun if I hadn't of\r\nused ruby, merb, ruby-ircd and a bunch of other cool stuff.\u003C/p\u003E\r\n\r\n\u003Cp\u003ELastly, thanks to all who I'd talked to and got help / support from whilst developing\r\nas well as those who voted for me (to get 2nd place and a kick ass $200 JB Hifi Gift Voucher).\r\nEven more so, thanks to the \u003Ca href=\"http://webjam.com.au/\"\u003EWebjam Crew\u003C/a\u003E for such\r\nan awesome event.\u003C/p\u003E", "state": "published", "created_at": "2008/11/07 18:06:14 +0000"}, {"slug": "the-great-slug-war", "updated_at": "2010/04/24 06:40:29 +0000", "title": "The Great Slug War", "posting_type": "post", "id": 37, "category_id": 2, "published_at": "2010/04/23 20:14:49 +0000", "contents": "\u003Ch3\u003EIntroduction\u003C/h3\u003E\r\n\r\n\u003Cp\u003EFor quite awhile, my goto choice for permalink / slug / seo-friendly url's in Rails has been \u003Ca href=\"http://github.com/norman/friendly_id\"\u003Efriendly_id\u003C/a\u003E. If you haven't seen it it, I highly suggest checking it out - it's a self-proclaimed \"Swiss Army Bulldozer\" of slug and the like, making it simple to support pretty much any common slug variation out of the box.\u003C/p\u003E\r\n\r\n\u003Cp\u003EFor me though, one of the biggest things that originally drew me to friendly_id (and, correct me if I'm wrong, one that no other major / well known Rails / AR slug plugin offered out of the box) was transparent support for slug history out of the box. If you're not familiar with friendly_id, this means that if you want to sync slugs (as makes sense - you don't want, for example, a posts slug reflecting an old, outdated title - you want it to refer to the newest version) but at the same time don't want to break existing URLs (e.g. the old slug should be a 301 redirect to the new one), friendly_id offered a simple option to record slug history - meaning that it would track prior versions of the slugs.\u003C/p\u003E\r\n\r\n\u003Csplit /\u003E\r\n\r\n\u003Cp\u003EBy default, the way this was implemented that when you wanted to add slugs to a bunch of models, you didn't even have to add a slug column to the table - you just generated a single slug table and let friendly_id handle the rest. The idea of being able to record this history seemed like a kick ass idea to me (and to be honest, I was surprised that no other plugins seemed to do it) and so I used friendly_id for most of my projects with great success.\u003C/p\u003E\r\n\r\n\u003Cp\u003EThen, along came Rails 3. friendly_id was quite quick to support the rails 3 betas out of the box (which is awesome to see in a reasonably popular rails plugin) but the public release still suffered a few problems. Namely, the way it overrides find to support all the awesome features it does meant that in Rails 3 you had to either monkey patch a bunch of different classes / find some neater way to integrate into the find lifecycle.\u003C/p\u003E\r\n\r\n\u003Cp\u003EWith this in mind, I set out to write a set of patches to support friendly_id on Rails 3 (namely, the public release didn't support find on named scopes or relations - quite possibly one of the biggest / most handy changes of Rails 3) which meant in an application where scopes are heavily used for finders, you're pretty much shit out of luck. \u003Ca href=\"http://github.com/Sutto/friendly_id\"\u003EMy patches\u003C/a\u003E went some of the way to fix support but still left a lot to desire.\u003C/p\u003E\r\n\r\n\u003Cp\u003EI set out mentally to find a better way to solve it (and am still doing so) for friendly_id, but in the mean time a bug (possibly directly related to said patches) in  \u003Ca href=\"http://github.com/YouthTree/big-help-mob\"\u003Ean application I was writing\u003C/a\u003E forced me to get rid of friendly_id and to write something simpler of my own.\u003C/p\u003E\r\n\r\n\u003Cp\u003EInitially I scrambled together (the bug was a site breaker) to write a single, ~50 or so line so-simple-it-hurts permalink library, using stringex for the url conversions. It worked but it wasn't quite what I wanted. So, With the fact I'd been reading the \u003Ca href=\"http://en.wikipedia.org/wiki/Robert_Buettner#Jason_Wander_series\"\u003EJason Wander\u003C/a\u003E \u003Ca href=\"http://www.bookdepository.com/search?searchTerm=Jason+Wander\u0026amp;search=search\"\u003Eseries of books\u003C/a\u003E, I set out to write my own, AR3.0+ only slug plugin that was lighter weight than friendly_id but still supported some of the best ideas (e.g. slug history). Also, most importantly to me, I decided early on it should \u003Cem\u003Enever\u003C/em\u003E override the find method, instead using another alternative name (more on that later).\u003C/p\u003E\r\n\r\n\u003Ch3\u003EIntroducing Pseudocephalopod\u003C/h3\u003E\r\n\r\n\u003Cp\u003E(Pardon the long name, I'm always open to shorter / nicer suggestions - although I hope it should be reasonably memorable if anything).\u003C/p\u003E\r\n\r\n\u003Cp\u003E\u003Ca href=\"http://github.com/Sutto/pseudocephalopod\"\u003EPseudocephalopod\u003C/a\u003E was written from scratch to support several core ideas:\u003C/p\u003E\r\n\r\n\u003Col\u003E\r\n\u003Cli\u003EIt should be tested (as any plugin should be / all the good ones e.g. friendly_id are)\u003C/li\u003E\r\n\u003Cli\u003EIt should make the most of relations in Rails 3.0, at the expensive of no backwards compatibility\u003C/li\u003E\r\n\u003Cli\u003EIt should support (and default to using) slug history, but with the option to turn it off.\u003C/li\u003E\r\n\u003Cli\u003EIt should let you easily cache slug looks in memcache or the like.\u003C/li\u003E\r\n\u003Cli\u003EIt should give you the option that if the source column is blank, it may generate a uuid in it's place (more on this in a minute)\u003C/li\u003E\r\n\u003Cli\u003EIt should use Stringex if available.\u003C/li\u003E\r\n\u003C/ol\u003E\r\n\r\n\r\n\u003Cp\u003ENumber six was a big one for me (even though implementation wise it's such a very tiny one). For quite a while I've been a huge fan of \u003Ca href=\"http://github.com/rsl\"\u003ERussel Norris\u003C/a\u003E' awesome \u003Ca href=\"http://github.com/rsl/stringex/\"\u003EStringex\u003C/a\u003E library. If you've never used it, it provides a simple slug plugin (acts_as_url) which I'd tried but it was a little too bare bones for myself. What it does  do perfectly though was provide a String#to_url method that does a reasonably nice / simple conversion of a string to a url safe string, much like String#parameterize in rails. In my opinion, it does it better than most other alternatives and if you're wondering why, I suggest just reading the project's (linked above) README.\u003C/p\u003E\r\n\r\n\u003Cp\u003EAlong the same lines, I felt strong about number 5 but had been yet to see it implemented. I liked the idea of not exposing the id of a record to users in the url, instead opting to show a uuid instead. Importantly though, since this is very opinionated I provided the option to turn it off.\u003C/p\u003E\r\n\r\n\u003Cp\u003ELastly, I liked the idea of using the naming scheme \"find_using_slug\" (vs. overriding find, or using from_slug or similar) after being inspired by part of authlogic - it's similar enough to find_by_slug that it's memorable but the distinction of using implies that there is (as is rightfully so) more going on behind the scenes than just a simple lookup.\u003C/p\u003E\r\n\r\n\u003Ch3\u003EUsing Pseudocephalopod\u003C/h3\u003E\r\n\r\n\u003Cp\u003ESo, if you're intrigued by now, I suggest actually taking a look - the code is simple enough to peruse (at the moment it's a little over 300 lines of code seperated into a few mixins and one or two classes). More importantly, it's as simple as running the following if you want to contribute back:\u003C/p\u003E\r\n\r\n\u003Cpre\u003E\u003Ccode\u003Egit clone git://github.com/Sutto/pseudocephalopod.git\r\ncd pseudocephalopod\r\nbundle install\r\nbundle exec rake\r\n# ... hack on the code here ...\r\nbundle exec rake\r\n\u003C/code\u003E\u003C/pre\u003E\r\n\r\n\u003Cp\u003EBundler really does make it easier to manage dependencies when righting something like a gem plugin. If you wish to use it on a rails app, it's as simple as doing the following:\u003C/p\u003E\r\n\r\n\u003Col\u003E\r\n\u003Cli\u003E\u003Cp\u003EAdd a dependency to your Gemfile\u003C/p\u003E\r\n\r\n\u003Cpre\u003E\u003Ccode\u003Eecho \"gem 'pseudocephalopod', '\u003E= 0.2.1'\" \u003E\u003E Gemfile\u003C/code\u003E\u003C/pre\u003E\u003C/li\u003E\r\n\u003Cli\u003E\u003Cp\u003EGenerate the slug history table\u003C/p\u003E\r\n\r\n\u003Cpre\u003E\u003Ccode\u003Erails generate pseudocephalopod:slugs\u003C/code\u003E\u003C/pre\u003E\u003C/li\u003E\r\n\u003Cli\u003E\u003Cp\u003EGenerate cached slug fields for each model\u003C/p\u003E\r\n\r\n\u003Cpre\u003E\u003Ccode\u003Erails generate pseudocephalopod:slug_migration User\u003C/code\u003E\u003C/pre\u003E\u003C/li\u003E\r\n\u003Cli\u003E\u003Cp\u003ERun your migrations\u003C/p\u003E\r\n\r\n\u003Cpre\u003E\u003Ccode\u003Erake db:migrate\u003C/code\u003E\u003C/pre\u003E\u003C/li\u003E\r\n\u003Cli\u003E\u003Cp\u003EEdit your files (e.g. user.rb) and add an is_sluggable call\u003C/p\u003E\r\n\r\n\u003Cpre\u003E\u003Ccode\u003Eclass User\r\n  is_sluggable :name\r\nend\u003C/code\u003E\u003C/pre\u003E\u003C/li\u003E\r\n\u003Cli\u003E\u003Cp\u003EChange your find calls to find_using_slug (find_using_slug! if you want to raise ActiveRecord::RecordNotFound; Also note it will work even if you pass in an id)\u003C/p\u003E\r\n\r\n\u003Cpre\u003E\u003Ccode\u003Eclass UsersController \u0026lt; ApplicationController\r\n  def show\r\n    @user = User.find_using_slug!(params[:id])\r\n  end\r\nend\u003C/code\u003E\u003C/pre\u003E\r\n\u003C/li\u003E\r\n\u003C/ol\u003E\r\n\r\n\u003Cp\u003EAnd you're done.\u003C/p\u003E\r\n\r\n\u003Cp\u003EIt provides a bit more than that but that's enough to get anyone started. If you want to check it out, \u003Ca href=\"http://github.com/Sutto/pseudocephalopod\"\u003Eclick here\u003C/a\u003E to view it on GitHub.\u003C/p\u003E\r\n", "state": "published", "created_at": "2010/04/23 20:11:18 +0000"}]